// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Group.sol format 1`] = `
====================================options=====================================
parsers: ["slang"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// SPDX-License-Identifier: MIT
pragma solidity 0.8.28;

contract Group {
    uint256 veryVeryVeryLongUint256A;
    uint256 veryVeryVeryLongUint256B;
    uint256 veryVeryVeryLongUint256C;
    uint256 resultUint256;
    bool veryVeryVeryLongBooleanA;
    bool veryVeryVeryLongBooleanB;
    bool veryVeryVeryLongBooleanC;
    bool resultBoolean;


    function exp() public {
        resultUint256 = veryVeryVeryLongUint256A ** veryVeryVeryLongUint256B ** veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A ** veryVeryVeryLongUint256B * veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A ** veryVeryVeryLongUint256B / veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A ** veryVeryVeryLongUint256B % veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A ** veryVeryVeryLongUint256B + veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A ** veryVeryVeryLongUint256B - veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A ** veryVeryVeryLongUint256B << veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A ** veryVeryVeryLongUint256B >> veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A ** veryVeryVeryLongUint256B & veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A ** veryVeryVeryLongUint256B | veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A ** veryVeryVeryLongUint256B ^ veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A ** veryVeryVeryLongUint256B == veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A ** veryVeryVeryLongUint256B != veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A ** veryVeryVeryLongUint256B < veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A ** veryVeryVeryLongUint256B <= veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A ** veryVeryVeryLongUint256B > veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A ** veryVeryVeryLongUint256B >= veryVeryVeryLongUint256C;
    }

    function mul() public {
        resultUint256 = veryVeryVeryLongUint256A * veryVeryVeryLongUint256B ** veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A * veryVeryVeryLongUint256B * veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A * veryVeryVeryLongUint256B / veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A * veryVeryVeryLongUint256B % veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A * veryVeryVeryLongUint256B + veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A * veryVeryVeryLongUint256B - veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A * veryVeryVeryLongUint256B << veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A * veryVeryVeryLongUint256B >> veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A * veryVeryVeryLongUint256B & veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A * veryVeryVeryLongUint256B | veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A * veryVeryVeryLongUint256B ^ veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A * veryVeryVeryLongUint256B == veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A * veryVeryVeryLongUint256B != veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A * veryVeryVeryLongUint256B < veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A * veryVeryVeryLongUint256B <= veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A * veryVeryVeryLongUint256B > veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A * veryVeryVeryLongUint256B >= veryVeryVeryLongUint256C;
    }
    
    function div() public {
        resultUint256 = veryVeryVeryLongUint256A / veryVeryVeryLongUint256B ** veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A / veryVeryVeryLongUint256B * veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A / veryVeryVeryLongUint256B / veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A / veryVeryVeryLongUint256B % veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A / veryVeryVeryLongUint256B + veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A / veryVeryVeryLongUint256B - veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A / veryVeryVeryLongUint256B << veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A / veryVeryVeryLongUint256B >> veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A / veryVeryVeryLongUint256B & veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A / veryVeryVeryLongUint256B | veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A / veryVeryVeryLongUint256B ^ veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A / veryVeryVeryLongUint256B == veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A / veryVeryVeryLongUint256B != veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A / veryVeryVeryLongUint256B < veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A / veryVeryVeryLongUint256B <= veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A / veryVeryVeryLongUint256B > veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A / veryVeryVeryLongUint256B >= veryVeryVeryLongUint256C;
    }
    
    function mod() public {
        resultUint256 = veryVeryVeryLongUint256A % veryVeryVeryLongUint256B ** veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A % veryVeryVeryLongUint256B * veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A % veryVeryVeryLongUint256B / veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A % veryVeryVeryLongUint256B % veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A % veryVeryVeryLongUint256B + veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A % veryVeryVeryLongUint256B - veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A % veryVeryVeryLongUint256B << veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A % veryVeryVeryLongUint256B >> veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A % veryVeryVeryLongUint256B & veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A % veryVeryVeryLongUint256B | veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A % veryVeryVeryLongUint256B ^ veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A % veryVeryVeryLongUint256B == veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A % veryVeryVeryLongUint256B != veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A % veryVeryVeryLongUint256B < veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A % veryVeryVeryLongUint256B <= veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A % veryVeryVeryLongUint256B > veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A % veryVeryVeryLongUint256B >= veryVeryVeryLongUint256C;
    }
    
    function add() public {
        resultUint256 = veryVeryVeryLongUint256A + veryVeryVeryLongUint256B ** veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A + veryVeryVeryLongUint256B * veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A + veryVeryVeryLongUint256B / veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A + veryVeryVeryLongUint256B % veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A + veryVeryVeryLongUint256B + veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A + veryVeryVeryLongUint256B - veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A + veryVeryVeryLongUint256B << veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A + veryVeryVeryLongUint256B >> veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A + veryVeryVeryLongUint256B & veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A + veryVeryVeryLongUint256B | veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A + veryVeryVeryLongUint256B ^ veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A + veryVeryVeryLongUint256B == veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A + veryVeryVeryLongUint256B != veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A + veryVeryVeryLongUint256B < veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A + veryVeryVeryLongUint256B <= veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A + veryVeryVeryLongUint256B > veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A + veryVeryVeryLongUint256B >= veryVeryVeryLongUint256C;
    }

    function sub() public {
        resultUint256 = veryVeryVeryLongUint256A - veryVeryVeryLongUint256B ** veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A - veryVeryVeryLongUint256B * veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A - veryVeryVeryLongUint256B / veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A - veryVeryVeryLongUint256B % veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A - veryVeryVeryLongUint256B + veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A - veryVeryVeryLongUint256B - veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A - veryVeryVeryLongUint256B << veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A - veryVeryVeryLongUint256B >> veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A - veryVeryVeryLongUint256B & veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A - veryVeryVeryLongUint256B | veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A - veryVeryVeryLongUint256B ^ veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A - veryVeryVeryLongUint256B == veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A - veryVeryVeryLongUint256B != veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A - veryVeryVeryLongUint256B < veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A - veryVeryVeryLongUint256B <= veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A - veryVeryVeryLongUint256B > veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A - veryVeryVeryLongUint256B >= veryVeryVeryLongUint256C;
    }

    function shiftL() public {
        resultUint256 = veryVeryVeryLongUint256A << veryVeryVeryLongUint256B ** veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A << veryVeryVeryLongUint256B * veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A << veryVeryVeryLongUint256B / veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A << veryVeryVeryLongUint256B % veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A << veryVeryVeryLongUint256B + veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A << veryVeryVeryLongUint256B - veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A << veryVeryVeryLongUint256B << veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A << veryVeryVeryLongUint256B >> veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A << veryVeryVeryLongUint256B & veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A << veryVeryVeryLongUint256B | veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A << veryVeryVeryLongUint256B ^ veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A << veryVeryVeryLongUint256B == veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A << veryVeryVeryLongUint256B != veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A << veryVeryVeryLongUint256B < veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A << veryVeryVeryLongUint256B <= veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A << veryVeryVeryLongUint256B > veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A << veryVeryVeryLongUint256B >= veryVeryVeryLongUint256C;
    }

    function shiftR() public {
        resultUint256 = veryVeryVeryLongUint256A >> veryVeryVeryLongUint256B ** veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A >> veryVeryVeryLongUint256B * veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A >> veryVeryVeryLongUint256B / veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A >> veryVeryVeryLongUint256B % veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A >> veryVeryVeryLongUint256B + veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A >> veryVeryVeryLongUint256B - veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A >> veryVeryVeryLongUint256B << veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A >> veryVeryVeryLongUint256B >> veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A >> veryVeryVeryLongUint256B & veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A >> veryVeryVeryLongUint256B | veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A >> veryVeryVeryLongUint256B ^ veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A >> veryVeryVeryLongUint256B == veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A >> veryVeryVeryLongUint256B != veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A >> veryVeryVeryLongUint256B < veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A >> veryVeryVeryLongUint256B <= veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A >> veryVeryVeryLongUint256B > veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A >> veryVeryVeryLongUint256B >= veryVeryVeryLongUint256C;
    }

    function bitAnd() public {
        resultUint256 = veryVeryVeryLongUint256A & veryVeryVeryLongUint256B ** veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A & veryVeryVeryLongUint256B * veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A & veryVeryVeryLongUint256B / veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A & veryVeryVeryLongUint256B % veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A & veryVeryVeryLongUint256B + veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A & veryVeryVeryLongUint256B - veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A & veryVeryVeryLongUint256B << veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A & veryVeryVeryLongUint256B >> veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A & veryVeryVeryLongUint256B & veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A & veryVeryVeryLongUint256B | veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A & veryVeryVeryLongUint256B ^ veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A & veryVeryVeryLongUint256B == veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A & veryVeryVeryLongUint256B != veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A & veryVeryVeryLongUint256B < veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A & veryVeryVeryLongUint256B <= veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A & veryVeryVeryLongUint256B > veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A & veryVeryVeryLongUint256B >= veryVeryVeryLongUint256C;
    }

    function bitOr() public {
        resultUint256 = veryVeryVeryLongUint256A | veryVeryVeryLongUint256B ** veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A | veryVeryVeryLongUint256B * veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A | veryVeryVeryLongUint256B / veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A | veryVeryVeryLongUint256B % veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A | veryVeryVeryLongUint256B + veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A | veryVeryVeryLongUint256B - veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A | veryVeryVeryLongUint256B << veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A | veryVeryVeryLongUint256B >> veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A | veryVeryVeryLongUint256B & veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A | veryVeryVeryLongUint256B | veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A | veryVeryVeryLongUint256B ^ veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A | veryVeryVeryLongUint256B == veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A | veryVeryVeryLongUint256B != veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A | veryVeryVeryLongUint256B < veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A | veryVeryVeryLongUint256B <= veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A | veryVeryVeryLongUint256B > veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A | veryVeryVeryLongUint256B >= veryVeryVeryLongUint256C;
    }

    function bitXor() public {
        resultUint256 = veryVeryVeryLongUint256A ^ veryVeryVeryLongUint256B ** veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A ^ veryVeryVeryLongUint256B * veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A ^ veryVeryVeryLongUint256B / veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A ^ veryVeryVeryLongUint256B % veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A ^ veryVeryVeryLongUint256B + veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A ^ veryVeryVeryLongUint256B - veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A ^ veryVeryVeryLongUint256B << veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A ^ veryVeryVeryLongUint256B >> veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A ^ veryVeryVeryLongUint256B & veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A ^ veryVeryVeryLongUint256B | veryVeryVeryLongUint256C;
        resultUint256 = veryVeryVeryLongUint256A ^ veryVeryVeryLongUint256B ^ veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A ^ veryVeryVeryLongUint256B == veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A ^ veryVeryVeryLongUint256B != veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A ^ veryVeryVeryLongUint256B < veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A ^ veryVeryVeryLongUint256B <= veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A ^ veryVeryVeryLongUint256B > veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A ^ veryVeryVeryLongUint256B >= veryVeryVeryLongUint256C;
    }

    function equal() public {
        resultBoolean = veryVeryVeryLongUint256A == veryVeryVeryLongUint256B ** veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A == veryVeryVeryLongUint256B * veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A == veryVeryVeryLongUint256B / veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A == veryVeryVeryLongUint256B % veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A == veryVeryVeryLongUint256B + veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A == veryVeryVeryLongUint256B - veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A == veryVeryVeryLongUint256B << veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A == veryVeryVeryLongUint256B >> veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A == veryVeryVeryLongUint256B & veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A == veryVeryVeryLongUint256B | veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A == veryVeryVeryLongUint256B ^ veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A == veryVeryVeryLongUint256B == veryVeryVeryLongBooleanC;
        resultBoolean = veryVeryVeryLongUint256A == veryVeryVeryLongUint256B != veryVeryVeryLongBooleanC;
        resultBoolean = veryVeryVeryLongBooleanA == veryVeryVeryLongUint256B < veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongBooleanA == veryVeryVeryLongUint256B <= veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongBooleanA == veryVeryVeryLongUint256B > veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongBooleanA == veryVeryVeryLongUint256B >= veryVeryVeryLongUint256C;
    }

    function notEqual() public {
        resultBoolean = veryVeryVeryLongUint256A != veryVeryVeryLongUint256B ** veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A != veryVeryVeryLongUint256B * veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A != veryVeryVeryLongUint256B / veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A != veryVeryVeryLongUint256B % veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A != veryVeryVeryLongUint256B + veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A != veryVeryVeryLongUint256B - veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A != veryVeryVeryLongUint256B << veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A != veryVeryVeryLongUint256B >> veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A != veryVeryVeryLongUint256B & veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A != veryVeryVeryLongUint256B | veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A != veryVeryVeryLongUint256B ^ veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A != veryVeryVeryLongUint256B == veryVeryVeryLongBooleanC;
        resultBoolean = veryVeryVeryLongUint256A != veryVeryVeryLongUint256B != veryVeryVeryLongBooleanC;
        resultBoolean = veryVeryVeryLongBooleanA != veryVeryVeryLongUint256B < veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongBooleanA != veryVeryVeryLongUint256B <= veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongBooleanA != veryVeryVeryLongUint256B > veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongBooleanA != veryVeryVeryLongUint256B >= veryVeryVeryLongUint256C;
    }

    function lessThan() public {
        resultBoolean = veryVeryVeryLongUint256A < veryVeryVeryLongUint256B ** veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A < veryVeryVeryLongUint256B * veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A < veryVeryVeryLongUint256B / veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A < veryVeryVeryLongUint256B % veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A < veryVeryVeryLongUint256B + veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A < veryVeryVeryLongUint256B - veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A < veryVeryVeryLongUint256B << veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A < veryVeryVeryLongUint256B >> veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A < veryVeryVeryLongUint256B & veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A < veryVeryVeryLongUint256B | veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A < veryVeryVeryLongUint256B ^ veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A < veryVeryVeryLongUint256B == veryVeryVeryLongBooleanC;
        resultBoolean = veryVeryVeryLongUint256A < veryVeryVeryLongUint256B != veryVeryVeryLongBooleanC;
    }

    function lessThanOrEqual() public {
        resultBoolean = veryVeryVeryLongUint256A <= veryVeryVeryLongUint256B ** veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A <= veryVeryVeryLongUint256B * veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A <= veryVeryVeryLongUint256B / veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A <= veryVeryVeryLongUint256B % veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A <= veryVeryVeryLongUint256B + veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A <= veryVeryVeryLongUint256B - veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A <= veryVeryVeryLongUint256B << veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A <= veryVeryVeryLongUint256B >> veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A <= veryVeryVeryLongUint256B & veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A <= veryVeryVeryLongUint256B | veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A <= veryVeryVeryLongUint256B ^ veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A <= veryVeryVeryLongUint256B == veryVeryVeryLongBooleanC;
        resultBoolean = veryVeryVeryLongUint256A <= veryVeryVeryLongUint256B != veryVeryVeryLongBooleanC;
    }

    function moreThan() public {
        resultBoolean = veryVeryVeryLongUint256A > veryVeryVeryLongUint256B ** veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A > veryVeryVeryLongUint256B * veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A > veryVeryVeryLongUint256B / veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A > veryVeryVeryLongUint256B % veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A > veryVeryVeryLongUint256B + veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A > veryVeryVeryLongUint256B - veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A > veryVeryVeryLongUint256B << veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A > veryVeryVeryLongUint256B >> veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A > veryVeryVeryLongUint256B & veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A > veryVeryVeryLongUint256B | veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A > veryVeryVeryLongUint256B ^ veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A > veryVeryVeryLongUint256B == veryVeryVeryLongBooleanC;
        resultBoolean = veryVeryVeryLongUint256A > veryVeryVeryLongUint256B != veryVeryVeryLongBooleanC;
    }

    function moreThanOrEqual() public {
        resultBoolean = veryVeryVeryLongUint256A >= veryVeryVeryLongUint256B ** veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A >= veryVeryVeryLongUint256B * veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A >= veryVeryVeryLongUint256B / veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A >= veryVeryVeryLongUint256B % veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A >= veryVeryVeryLongUint256B + veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A >= veryVeryVeryLongUint256B - veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A >= veryVeryVeryLongUint256B << veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A >= veryVeryVeryLongUint256B >> veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A >= veryVeryVeryLongUint256B & veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A >= veryVeryVeryLongUint256B | veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A >= veryVeryVeryLongUint256B ^ veryVeryVeryLongUint256C;
        resultBoolean = veryVeryVeryLongUint256A >= veryVeryVeryLongUint256B == veryVeryVeryLongBooleanC;
        resultBoolean = veryVeryVeryLongUint256A >= veryVeryVeryLongUint256B != veryVeryVeryLongBooleanC;
    }

    function logic() public  {
        resultBoolean = veryVeryVeryLongBooleanA || veryVeryVeryLongBooleanB || veryVeryVeryLongBooleanC;
        resultBoolean = veryVeryVeryLongBooleanA || veryVeryVeryLongBooleanB && veryVeryVeryLongBooleanC;
        resultBoolean = veryVeryVeryLongBooleanA || veryVeryVeryLongBooleanB == veryVeryVeryLongBooleanC;
        resultBoolean = veryVeryVeryLongBooleanA || veryVeryVeryLongBooleanB != veryVeryVeryLongBooleanC;
        resultBoolean = veryVeryVeryLongBooleanA && veryVeryVeryLongBooleanB || veryVeryVeryLongBooleanC;
        resultBoolean = veryVeryVeryLongBooleanA && veryVeryVeryLongBooleanB && veryVeryVeryLongBooleanC;
        resultBoolean = veryVeryVeryLongBooleanA && veryVeryVeryLongBooleanB == veryVeryVeryLongBooleanC;
        resultBoolean = veryVeryVeryLongBooleanA && veryVeryVeryLongBooleanB != veryVeryVeryLongBooleanC;
        resultBoolean = veryVeryVeryLongBooleanA == veryVeryVeryLongBooleanB || veryVeryVeryLongBooleanC;
        resultBoolean = veryVeryVeryLongBooleanA == veryVeryVeryLongBooleanB && veryVeryVeryLongBooleanC;
        resultBoolean = veryVeryVeryLongBooleanA != veryVeryVeryLongBooleanB || veryVeryVeryLongBooleanC;
        resultBoolean = veryVeryVeryLongBooleanA != veryVeryVeryLongBooleanB && veryVeryVeryLongBooleanC;
    }
}
=====================================output=====================================
// SPDX-License-Identifier: MIT
pragma solidity 0.8.28;

contract Group {
    uint256 veryVeryVeryLongUint256A;
    uint256 veryVeryVeryLongUint256B;
    uint256 veryVeryVeryLongUint256C;
    uint256 resultUint256;
    bool veryVeryVeryLongBooleanA;
    bool veryVeryVeryLongBooleanB;
    bool veryVeryVeryLongBooleanC;
    bool resultBoolean;

    function exp() public {
        resultUint256 =
            veryVeryVeryLongUint256A **
                (veryVeryVeryLongUint256B ** veryVeryVeryLongUint256C);
        resultUint256 =
            veryVeryVeryLongUint256A ** veryVeryVeryLongUint256B *
            veryVeryVeryLongUint256C;
        resultUint256 =
            veryVeryVeryLongUint256A ** veryVeryVeryLongUint256B /
            veryVeryVeryLongUint256C;
        resultUint256 =
            veryVeryVeryLongUint256A ** veryVeryVeryLongUint256B %
            veryVeryVeryLongUint256C;
        resultUint256 =
            veryVeryVeryLongUint256A ** veryVeryVeryLongUint256B +
            veryVeryVeryLongUint256C;
        resultUint256 =
            veryVeryVeryLongUint256A ** veryVeryVeryLongUint256B -
            veryVeryVeryLongUint256C;
        resultUint256 =
            (veryVeryVeryLongUint256A ** veryVeryVeryLongUint256B) <<
            veryVeryVeryLongUint256C;
        resultUint256 =
            (veryVeryVeryLongUint256A ** veryVeryVeryLongUint256B) >>
            veryVeryVeryLongUint256C;
        resultUint256 =
            (veryVeryVeryLongUint256A ** veryVeryVeryLongUint256B) &
            veryVeryVeryLongUint256C;
        resultUint256 =
            (veryVeryVeryLongUint256A ** veryVeryVeryLongUint256B) |
            veryVeryVeryLongUint256C;
        resultUint256 =
            (veryVeryVeryLongUint256A ** veryVeryVeryLongUint256B) ^
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A ** veryVeryVeryLongUint256B ==
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A ** veryVeryVeryLongUint256B !=
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A ** veryVeryVeryLongUint256B <
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A ** veryVeryVeryLongUint256B <=
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A ** veryVeryVeryLongUint256B >
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A ** veryVeryVeryLongUint256B >=
            veryVeryVeryLongUint256C;
    }

    function mul() public {
        resultUint256 =
            veryVeryVeryLongUint256A *
            veryVeryVeryLongUint256B ** veryVeryVeryLongUint256C;
        resultUint256 =
            veryVeryVeryLongUint256A *
            veryVeryVeryLongUint256B *
            veryVeryVeryLongUint256C;
        resultUint256 =
            (veryVeryVeryLongUint256A * veryVeryVeryLongUint256B) /
            veryVeryVeryLongUint256C;
        resultUint256 =
            (veryVeryVeryLongUint256A * veryVeryVeryLongUint256B) %
            veryVeryVeryLongUint256C;
        resultUint256 =
            veryVeryVeryLongUint256A *
            veryVeryVeryLongUint256B +
            veryVeryVeryLongUint256C;
        resultUint256 =
            veryVeryVeryLongUint256A *
            veryVeryVeryLongUint256B -
            veryVeryVeryLongUint256C;
        resultUint256 =
            (veryVeryVeryLongUint256A * veryVeryVeryLongUint256B) <<
            veryVeryVeryLongUint256C;
        resultUint256 =
            (veryVeryVeryLongUint256A * veryVeryVeryLongUint256B) >>
            veryVeryVeryLongUint256C;
        resultUint256 =
            (veryVeryVeryLongUint256A * veryVeryVeryLongUint256B) &
            veryVeryVeryLongUint256C;
        resultUint256 =
            (veryVeryVeryLongUint256A * veryVeryVeryLongUint256B) |
            veryVeryVeryLongUint256C;
        resultUint256 =
            (veryVeryVeryLongUint256A * veryVeryVeryLongUint256B) ^
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A * veryVeryVeryLongUint256B ==
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A * veryVeryVeryLongUint256B !=
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A * veryVeryVeryLongUint256B <
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A * veryVeryVeryLongUint256B <=
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A * veryVeryVeryLongUint256B >
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A * veryVeryVeryLongUint256B >=
            veryVeryVeryLongUint256C;
    }

    function div() public {
        resultUint256 =
            veryVeryVeryLongUint256A /
            veryVeryVeryLongUint256B ** veryVeryVeryLongUint256C;
        resultUint256 =
            (veryVeryVeryLongUint256A / veryVeryVeryLongUint256B) *
            veryVeryVeryLongUint256C;
        resultUint256 =
            veryVeryVeryLongUint256A /
            veryVeryVeryLongUint256B /
            veryVeryVeryLongUint256C;
        resultUint256 =
            (veryVeryVeryLongUint256A / veryVeryVeryLongUint256B) %
            veryVeryVeryLongUint256C;
        resultUint256 =
            veryVeryVeryLongUint256A /
            veryVeryVeryLongUint256B +
            veryVeryVeryLongUint256C;
        resultUint256 =
            veryVeryVeryLongUint256A /
            veryVeryVeryLongUint256B -
            veryVeryVeryLongUint256C;
        resultUint256 =
            (veryVeryVeryLongUint256A / veryVeryVeryLongUint256B) <<
            veryVeryVeryLongUint256C;
        resultUint256 =
            (veryVeryVeryLongUint256A / veryVeryVeryLongUint256B) >>
            veryVeryVeryLongUint256C;
        resultUint256 =
            (veryVeryVeryLongUint256A / veryVeryVeryLongUint256B) &
            veryVeryVeryLongUint256C;
        resultUint256 =
            (veryVeryVeryLongUint256A / veryVeryVeryLongUint256B) |
            veryVeryVeryLongUint256C;
        resultUint256 =
            (veryVeryVeryLongUint256A / veryVeryVeryLongUint256B) ^
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A / veryVeryVeryLongUint256B ==
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A / veryVeryVeryLongUint256B !=
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A / veryVeryVeryLongUint256B <
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A / veryVeryVeryLongUint256B <=
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A / veryVeryVeryLongUint256B >
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A / veryVeryVeryLongUint256B >=
            veryVeryVeryLongUint256C;
    }

    function mod() public {
        resultUint256 =
            veryVeryVeryLongUint256A %
            veryVeryVeryLongUint256B ** veryVeryVeryLongUint256C;
        resultUint256 =
            (veryVeryVeryLongUint256A % veryVeryVeryLongUint256B) *
            veryVeryVeryLongUint256C;
        resultUint256 =
            (veryVeryVeryLongUint256A % veryVeryVeryLongUint256B) /
            veryVeryVeryLongUint256C;
        resultUint256 =
            (veryVeryVeryLongUint256A % veryVeryVeryLongUint256B) %
            veryVeryVeryLongUint256C;
        resultUint256 =
            (veryVeryVeryLongUint256A % veryVeryVeryLongUint256B) +
            veryVeryVeryLongUint256C;
        resultUint256 =
            (veryVeryVeryLongUint256A % veryVeryVeryLongUint256B) -
            veryVeryVeryLongUint256C;
        resultUint256 =
            veryVeryVeryLongUint256A %
            veryVeryVeryLongUint256B <<
            veryVeryVeryLongUint256C;
        resultUint256 =
            veryVeryVeryLongUint256A %
            veryVeryVeryLongUint256B >>
            veryVeryVeryLongUint256C;
        resultUint256 =
            veryVeryVeryLongUint256A %
            veryVeryVeryLongUint256B &
            veryVeryVeryLongUint256C;
        resultUint256 =
            veryVeryVeryLongUint256A %
            veryVeryVeryLongUint256B |
            veryVeryVeryLongUint256C;
        resultUint256 =
            veryVeryVeryLongUint256A %
            veryVeryVeryLongUint256B ^
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A % veryVeryVeryLongUint256B ==
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A % veryVeryVeryLongUint256B !=
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A % veryVeryVeryLongUint256B <
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A % veryVeryVeryLongUint256B <=
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A % veryVeryVeryLongUint256B >
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A % veryVeryVeryLongUint256B >=
            veryVeryVeryLongUint256C;
    }

    function add() public {
        resultUint256 =
            veryVeryVeryLongUint256A +
            veryVeryVeryLongUint256B ** veryVeryVeryLongUint256C;
        resultUint256 =
            veryVeryVeryLongUint256A +
            veryVeryVeryLongUint256B *
            veryVeryVeryLongUint256C;
        resultUint256 =
            veryVeryVeryLongUint256A +
            veryVeryVeryLongUint256B /
            veryVeryVeryLongUint256C;
        resultUint256 =
            veryVeryVeryLongUint256A +
            (veryVeryVeryLongUint256B % veryVeryVeryLongUint256C);
        resultUint256 =
            veryVeryVeryLongUint256A +
            veryVeryVeryLongUint256B +
            veryVeryVeryLongUint256C;
        resultUint256 =
            veryVeryVeryLongUint256A +
            veryVeryVeryLongUint256B -
            veryVeryVeryLongUint256C;
        resultUint256 =
            (veryVeryVeryLongUint256A + veryVeryVeryLongUint256B) <<
            veryVeryVeryLongUint256C;
        resultUint256 =
            (veryVeryVeryLongUint256A + veryVeryVeryLongUint256B) >>
            veryVeryVeryLongUint256C;
        resultUint256 =
            (veryVeryVeryLongUint256A + veryVeryVeryLongUint256B) &
            veryVeryVeryLongUint256C;
        resultUint256 =
            (veryVeryVeryLongUint256A + veryVeryVeryLongUint256B) |
            veryVeryVeryLongUint256C;
        resultUint256 =
            (veryVeryVeryLongUint256A + veryVeryVeryLongUint256B) ^
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A + veryVeryVeryLongUint256B ==
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A + veryVeryVeryLongUint256B !=
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A + veryVeryVeryLongUint256B <
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A + veryVeryVeryLongUint256B <=
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A + veryVeryVeryLongUint256B >
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A + veryVeryVeryLongUint256B >=
            veryVeryVeryLongUint256C;
    }

    function sub() public {
        resultUint256 =
            veryVeryVeryLongUint256A -
            veryVeryVeryLongUint256B ** veryVeryVeryLongUint256C;
        resultUint256 =
            veryVeryVeryLongUint256A -
            veryVeryVeryLongUint256B *
            veryVeryVeryLongUint256C;
        resultUint256 =
            veryVeryVeryLongUint256A -
            veryVeryVeryLongUint256B /
            veryVeryVeryLongUint256C;
        resultUint256 =
            veryVeryVeryLongUint256A -
            (veryVeryVeryLongUint256B % veryVeryVeryLongUint256C);
        resultUint256 =
            veryVeryVeryLongUint256A -
            veryVeryVeryLongUint256B +
            veryVeryVeryLongUint256C;
        resultUint256 =
            veryVeryVeryLongUint256A -
            veryVeryVeryLongUint256B -
            veryVeryVeryLongUint256C;
        resultUint256 =
            (veryVeryVeryLongUint256A - veryVeryVeryLongUint256B) <<
            veryVeryVeryLongUint256C;
        resultUint256 =
            (veryVeryVeryLongUint256A - veryVeryVeryLongUint256B) >>
            veryVeryVeryLongUint256C;
        resultUint256 =
            (veryVeryVeryLongUint256A - veryVeryVeryLongUint256B) &
            veryVeryVeryLongUint256C;
        resultUint256 =
            (veryVeryVeryLongUint256A - veryVeryVeryLongUint256B) |
            veryVeryVeryLongUint256C;
        resultUint256 =
            (veryVeryVeryLongUint256A - veryVeryVeryLongUint256B) ^
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A - veryVeryVeryLongUint256B ==
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A - veryVeryVeryLongUint256B !=
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A - veryVeryVeryLongUint256B <
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A - veryVeryVeryLongUint256B <=
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A - veryVeryVeryLongUint256B >
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A - veryVeryVeryLongUint256B >=
            veryVeryVeryLongUint256C;
    }

    function shiftL() public {
        resultUint256 =
            veryVeryVeryLongUint256A <<
            (veryVeryVeryLongUint256B ** veryVeryVeryLongUint256C);
        resultUint256 =
            veryVeryVeryLongUint256A <<
            (veryVeryVeryLongUint256B * veryVeryVeryLongUint256C);
        resultUint256 =
            veryVeryVeryLongUint256A <<
            (veryVeryVeryLongUint256B / veryVeryVeryLongUint256C);
        resultUint256 =
            veryVeryVeryLongUint256A <<
            veryVeryVeryLongUint256B %
            veryVeryVeryLongUint256C;
        resultUint256 =
            veryVeryVeryLongUint256A <<
            (veryVeryVeryLongUint256B + veryVeryVeryLongUint256C);
        resultUint256 =
            veryVeryVeryLongUint256A <<
            (veryVeryVeryLongUint256B - veryVeryVeryLongUint256C);
        resultUint256 =
            (veryVeryVeryLongUint256A << veryVeryVeryLongUint256B) <<
            veryVeryVeryLongUint256C;
        resultUint256 =
            (veryVeryVeryLongUint256A << veryVeryVeryLongUint256B) >>
            veryVeryVeryLongUint256C;
        resultUint256 =
            (veryVeryVeryLongUint256A << veryVeryVeryLongUint256B) &
            veryVeryVeryLongUint256C;
        resultUint256 =
            (veryVeryVeryLongUint256A << veryVeryVeryLongUint256B) |
            veryVeryVeryLongUint256C;
        resultUint256 =
            (veryVeryVeryLongUint256A << veryVeryVeryLongUint256B) ^
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A << veryVeryVeryLongUint256B ==
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A << veryVeryVeryLongUint256B !=
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A << veryVeryVeryLongUint256B <
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A << veryVeryVeryLongUint256B <=
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A << veryVeryVeryLongUint256B >
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A << veryVeryVeryLongUint256B >=
            veryVeryVeryLongUint256C;
    }

    function shiftR() public {
        resultUint256 =
            veryVeryVeryLongUint256A >>
            (veryVeryVeryLongUint256B ** veryVeryVeryLongUint256C);
        resultUint256 =
            veryVeryVeryLongUint256A >>
            (veryVeryVeryLongUint256B * veryVeryVeryLongUint256C);
        resultUint256 =
            veryVeryVeryLongUint256A >>
            (veryVeryVeryLongUint256B / veryVeryVeryLongUint256C);
        resultUint256 =
            veryVeryVeryLongUint256A >>
            veryVeryVeryLongUint256B %
            veryVeryVeryLongUint256C;
        resultUint256 =
            veryVeryVeryLongUint256A >>
            (veryVeryVeryLongUint256B + veryVeryVeryLongUint256C);
        resultUint256 =
            veryVeryVeryLongUint256A >>
            (veryVeryVeryLongUint256B - veryVeryVeryLongUint256C);
        resultUint256 =
            (veryVeryVeryLongUint256A >> veryVeryVeryLongUint256B) <<
            veryVeryVeryLongUint256C;
        resultUint256 =
            (veryVeryVeryLongUint256A >> veryVeryVeryLongUint256B) >>
            veryVeryVeryLongUint256C;
        resultUint256 =
            (veryVeryVeryLongUint256A >> veryVeryVeryLongUint256B) &
            veryVeryVeryLongUint256C;
        resultUint256 =
            (veryVeryVeryLongUint256A >> veryVeryVeryLongUint256B) |
            veryVeryVeryLongUint256C;
        resultUint256 =
            (veryVeryVeryLongUint256A >> veryVeryVeryLongUint256B) ^
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A >> veryVeryVeryLongUint256B ==
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A >> veryVeryVeryLongUint256B !=
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A >> veryVeryVeryLongUint256B <
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A >> veryVeryVeryLongUint256B <=
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A >> veryVeryVeryLongUint256B >
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A >> veryVeryVeryLongUint256B >=
            veryVeryVeryLongUint256C;
    }

    function bitAnd() public {
        resultUint256 =
            veryVeryVeryLongUint256A &
            (veryVeryVeryLongUint256B ** veryVeryVeryLongUint256C);
        resultUint256 =
            veryVeryVeryLongUint256A &
            (veryVeryVeryLongUint256B * veryVeryVeryLongUint256C);
        resultUint256 =
            veryVeryVeryLongUint256A &
            (veryVeryVeryLongUint256B / veryVeryVeryLongUint256C);
        resultUint256 =
            veryVeryVeryLongUint256A &
            veryVeryVeryLongUint256B %
            veryVeryVeryLongUint256C;
        resultUint256 =
            veryVeryVeryLongUint256A &
            (veryVeryVeryLongUint256B + veryVeryVeryLongUint256C);
        resultUint256 =
            veryVeryVeryLongUint256A &
            (veryVeryVeryLongUint256B - veryVeryVeryLongUint256C);
        resultUint256 =
            veryVeryVeryLongUint256A &
            (veryVeryVeryLongUint256B << veryVeryVeryLongUint256C);
        resultUint256 =
            veryVeryVeryLongUint256A &
            (veryVeryVeryLongUint256B >> veryVeryVeryLongUint256C);
        resultUint256 =
            veryVeryVeryLongUint256A &
            veryVeryVeryLongUint256B &
            veryVeryVeryLongUint256C;
        resultUint256 =
            (veryVeryVeryLongUint256A & veryVeryVeryLongUint256B) |
            veryVeryVeryLongUint256C;
        resultUint256 =
            (veryVeryVeryLongUint256A & veryVeryVeryLongUint256B) ^
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A & veryVeryVeryLongUint256B ==
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A & veryVeryVeryLongUint256B !=
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A & veryVeryVeryLongUint256B <
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A & veryVeryVeryLongUint256B <=
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A & veryVeryVeryLongUint256B >
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A & veryVeryVeryLongUint256B >=
            veryVeryVeryLongUint256C;
    }

    function bitOr() public {
        resultUint256 =
            veryVeryVeryLongUint256A |
            (veryVeryVeryLongUint256B ** veryVeryVeryLongUint256C);
        resultUint256 =
            veryVeryVeryLongUint256A |
            (veryVeryVeryLongUint256B * veryVeryVeryLongUint256C);
        resultUint256 =
            veryVeryVeryLongUint256A |
            (veryVeryVeryLongUint256B / veryVeryVeryLongUint256C);
        resultUint256 =
            veryVeryVeryLongUint256A |
            veryVeryVeryLongUint256B %
            veryVeryVeryLongUint256C;
        resultUint256 =
            veryVeryVeryLongUint256A |
            (veryVeryVeryLongUint256B + veryVeryVeryLongUint256C);
        resultUint256 =
            veryVeryVeryLongUint256A |
            (veryVeryVeryLongUint256B - veryVeryVeryLongUint256C);
        resultUint256 =
            veryVeryVeryLongUint256A |
            (veryVeryVeryLongUint256B << veryVeryVeryLongUint256C);
        resultUint256 =
            veryVeryVeryLongUint256A |
            (veryVeryVeryLongUint256B >> veryVeryVeryLongUint256C);
        resultUint256 =
            veryVeryVeryLongUint256A |
            (veryVeryVeryLongUint256B & veryVeryVeryLongUint256C);
        resultUint256 =
            veryVeryVeryLongUint256A |
            veryVeryVeryLongUint256B |
            veryVeryVeryLongUint256C;
        resultUint256 =
            veryVeryVeryLongUint256A |
            (veryVeryVeryLongUint256B ^ veryVeryVeryLongUint256C);
        resultBoolean =
            veryVeryVeryLongUint256A | veryVeryVeryLongUint256B ==
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A | veryVeryVeryLongUint256B !=
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A | veryVeryVeryLongUint256B <
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A | veryVeryVeryLongUint256B <=
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A | veryVeryVeryLongUint256B >
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A | veryVeryVeryLongUint256B >=
            veryVeryVeryLongUint256C;
    }

    function bitXor() public {
        resultUint256 =
            veryVeryVeryLongUint256A ^
            (veryVeryVeryLongUint256B ** veryVeryVeryLongUint256C);
        resultUint256 =
            veryVeryVeryLongUint256A ^
            (veryVeryVeryLongUint256B * veryVeryVeryLongUint256C);
        resultUint256 =
            veryVeryVeryLongUint256A ^
            (veryVeryVeryLongUint256B / veryVeryVeryLongUint256C);
        resultUint256 =
            veryVeryVeryLongUint256A ^
            veryVeryVeryLongUint256B %
            veryVeryVeryLongUint256C;
        resultUint256 =
            veryVeryVeryLongUint256A ^
            (veryVeryVeryLongUint256B + veryVeryVeryLongUint256C);
        resultUint256 =
            veryVeryVeryLongUint256A ^
            (veryVeryVeryLongUint256B - veryVeryVeryLongUint256C);
        resultUint256 =
            veryVeryVeryLongUint256A ^
            (veryVeryVeryLongUint256B << veryVeryVeryLongUint256C);
        resultUint256 =
            veryVeryVeryLongUint256A ^
            (veryVeryVeryLongUint256B >> veryVeryVeryLongUint256C);
        resultUint256 =
            veryVeryVeryLongUint256A ^
            (veryVeryVeryLongUint256B & veryVeryVeryLongUint256C);
        resultUint256 =
            (veryVeryVeryLongUint256A ^ veryVeryVeryLongUint256B) |
            veryVeryVeryLongUint256C;
        resultUint256 =
            veryVeryVeryLongUint256A ^
            veryVeryVeryLongUint256B ^
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A ^ veryVeryVeryLongUint256B ==
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A ^ veryVeryVeryLongUint256B !=
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A ^ veryVeryVeryLongUint256B <
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A ^ veryVeryVeryLongUint256B <=
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A ^ veryVeryVeryLongUint256B >
            veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A ^ veryVeryVeryLongUint256B >=
            veryVeryVeryLongUint256C;
    }

    function equal() public {
        resultBoolean =
            veryVeryVeryLongUint256A ==
            veryVeryVeryLongUint256B ** veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A ==
            veryVeryVeryLongUint256B * veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A ==
            veryVeryVeryLongUint256B / veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A ==
            veryVeryVeryLongUint256B % veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A ==
            veryVeryVeryLongUint256B + veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A ==
            veryVeryVeryLongUint256B - veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A ==
            veryVeryVeryLongUint256B << veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A ==
            veryVeryVeryLongUint256B >> veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A ==
            veryVeryVeryLongUint256B & veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A ==
            veryVeryVeryLongUint256B | veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A ==
            veryVeryVeryLongUint256B ^ veryVeryVeryLongUint256C;
        resultBoolean =
            (veryVeryVeryLongUint256A == veryVeryVeryLongUint256B) ==
            veryVeryVeryLongBooleanC;
        resultBoolean =
            (veryVeryVeryLongUint256A == veryVeryVeryLongUint256B) !=
            veryVeryVeryLongBooleanC;
        resultBoolean =
            veryVeryVeryLongBooleanA ==
            veryVeryVeryLongUint256B < veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongBooleanA ==
            veryVeryVeryLongUint256B <= veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongBooleanA ==
            veryVeryVeryLongUint256B > veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongBooleanA ==
            veryVeryVeryLongUint256B >= veryVeryVeryLongUint256C;
    }

    function notEqual() public {
        resultBoolean =
            veryVeryVeryLongUint256A !=
            veryVeryVeryLongUint256B ** veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A !=
            veryVeryVeryLongUint256B * veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A !=
            veryVeryVeryLongUint256B / veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A !=
            veryVeryVeryLongUint256B % veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A !=
            veryVeryVeryLongUint256B + veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A !=
            veryVeryVeryLongUint256B - veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A !=
            veryVeryVeryLongUint256B << veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A !=
            veryVeryVeryLongUint256B >> veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A !=
            veryVeryVeryLongUint256B & veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A !=
            veryVeryVeryLongUint256B | veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A !=
            veryVeryVeryLongUint256B ^ veryVeryVeryLongUint256C;
        resultBoolean =
            (veryVeryVeryLongUint256A != veryVeryVeryLongUint256B) ==
            veryVeryVeryLongBooleanC;
        resultBoolean =
            (veryVeryVeryLongUint256A != veryVeryVeryLongUint256B) !=
            veryVeryVeryLongBooleanC;
        resultBoolean =
            veryVeryVeryLongBooleanA !=
            veryVeryVeryLongUint256B < veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongBooleanA !=
            veryVeryVeryLongUint256B <= veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongBooleanA !=
            veryVeryVeryLongUint256B > veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongBooleanA !=
            veryVeryVeryLongUint256B >= veryVeryVeryLongUint256C;
    }

    function lessThan() public {
        resultBoolean =
            veryVeryVeryLongUint256A <
            veryVeryVeryLongUint256B ** veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A <
            veryVeryVeryLongUint256B * veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A <
            veryVeryVeryLongUint256B / veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A <
            veryVeryVeryLongUint256B % veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A <
            veryVeryVeryLongUint256B + veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A <
            veryVeryVeryLongUint256B - veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A <
            veryVeryVeryLongUint256B << veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A <
            veryVeryVeryLongUint256B >> veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A <
            veryVeryVeryLongUint256B & veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A <
            veryVeryVeryLongUint256B | veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A <
            veryVeryVeryLongUint256B ^ veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A < veryVeryVeryLongUint256B ==
            veryVeryVeryLongBooleanC;
        resultBoolean =
            veryVeryVeryLongUint256A < veryVeryVeryLongUint256B !=
            veryVeryVeryLongBooleanC;
    }

    function lessThanOrEqual() public {
        resultBoolean =
            veryVeryVeryLongUint256A <=
            veryVeryVeryLongUint256B ** veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A <=
            veryVeryVeryLongUint256B * veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A <=
            veryVeryVeryLongUint256B / veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A <=
            veryVeryVeryLongUint256B % veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A <=
            veryVeryVeryLongUint256B + veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A <=
            veryVeryVeryLongUint256B - veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A <=
            veryVeryVeryLongUint256B << veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A <=
            veryVeryVeryLongUint256B >> veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A <=
            veryVeryVeryLongUint256B & veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A <=
            veryVeryVeryLongUint256B | veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A <=
            veryVeryVeryLongUint256B ^ veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A <= veryVeryVeryLongUint256B ==
            veryVeryVeryLongBooleanC;
        resultBoolean =
            veryVeryVeryLongUint256A <= veryVeryVeryLongUint256B !=
            veryVeryVeryLongBooleanC;
    }

    function moreThan() public {
        resultBoolean =
            veryVeryVeryLongUint256A >
            veryVeryVeryLongUint256B ** veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A >
            veryVeryVeryLongUint256B * veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A >
            veryVeryVeryLongUint256B / veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A >
            veryVeryVeryLongUint256B % veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A >
            veryVeryVeryLongUint256B + veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A >
            veryVeryVeryLongUint256B - veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A >
            veryVeryVeryLongUint256B << veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A >
            veryVeryVeryLongUint256B >> veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A >
            veryVeryVeryLongUint256B & veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A >
            veryVeryVeryLongUint256B | veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A >
            veryVeryVeryLongUint256B ^ veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A > veryVeryVeryLongUint256B ==
            veryVeryVeryLongBooleanC;
        resultBoolean =
            veryVeryVeryLongUint256A > veryVeryVeryLongUint256B !=
            veryVeryVeryLongBooleanC;
    }

    function moreThanOrEqual() public {
        resultBoolean =
            veryVeryVeryLongUint256A >=
            veryVeryVeryLongUint256B ** veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A >=
            veryVeryVeryLongUint256B * veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A >=
            veryVeryVeryLongUint256B / veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A >=
            veryVeryVeryLongUint256B % veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A >=
            veryVeryVeryLongUint256B + veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A >=
            veryVeryVeryLongUint256B - veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A >=
            veryVeryVeryLongUint256B << veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A >=
            veryVeryVeryLongUint256B >> veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A >=
            veryVeryVeryLongUint256B & veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A >=
            veryVeryVeryLongUint256B | veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A >=
            veryVeryVeryLongUint256B ^ veryVeryVeryLongUint256C;
        resultBoolean =
            veryVeryVeryLongUint256A >= veryVeryVeryLongUint256B ==
            veryVeryVeryLongBooleanC;
        resultBoolean =
            veryVeryVeryLongUint256A >= veryVeryVeryLongUint256B !=
            veryVeryVeryLongBooleanC;
    }

    function logic() public {
        resultBoolean =
            veryVeryVeryLongBooleanA ||
            veryVeryVeryLongBooleanB ||
            veryVeryVeryLongBooleanC;
        resultBoolean =
            veryVeryVeryLongBooleanA ||
            (veryVeryVeryLongBooleanB && veryVeryVeryLongBooleanC);
        resultBoolean =
            veryVeryVeryLongBooleanA ||
            veryVeryVeryLongBooleanB == veryVeryVeryLongBooleanC;
        resultBoolean =
            veryVeryVeryLongBooleanA ||
            veryVeryVeryLongBooleanB != veryVeryVeryLongBooleanC;
        resultBoolean =
            (veryVeryVeryLongBooleanA && veryVeryVeryLongBooleanB) ||
            veryVeryVeryLongBooleanC;
        resultBoolean =
            veryVeryVeryLongBooleanA &&
            veryVeryVeryLongBooleanB &&
            veryVeryVeryLongBooleanC;
        resultBoolean =
            veryVeryVeryLongBooleanA &&
            veryVeryVeryLongBooleanB == veryVeryVeryLongBooleanC;
        resultBoolean =
            veryVeryVeryLongBooleanA &&
            veryVeryVeryLongBooleanB != veryVeryVeryLongBooleanC;
        resultBoolean =
            veryVeryVeryLongBooleanA == veryVeryVeryLongBooleanB ||
            veryVeryVeryLongBooleanC;
        resultBoolean =
            veryVeryVeryLongBooleanA == veryVeryVeryLongBooleanB &&
            veryVeryVeryLongBooleanC;
        resultBoolean =
            veryVeryVeryLongBooleanA != veryVeryVeryLongBooleanB ||
            veryVeryVeryLongBooleanC;
        resultBoolean =
            veryVeryVeryLongBooleanA != veryVeryVeryLongBooleanB &&
            veryVeryVeryLongBooleanC;
    }
}

================================================================================
`;

exports[`Indent.sol format 1`] = `
====================================options=====================================
parsers: ["slang"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
// SPDX-License-Identifier: MIT
pragma solidity 0.8.28;

contract Indent {
    uint256 veryVeryVeryExtremelyExtremelyLongUint256A;
    uint256 veryVeryVeryExtremelyExtremelyLongUint256B;
    uint256 veryVeryVeryExtremelyExtremelyLongUint256C;
    uint256 resultUint256;
    bool veryVeryVeryExtremelyExtremelyLongBooleanA;
    bool veryVeryVeryExtremelyExtremelyLongBooleanB;
    bool veryVeryVeryExtremelyExtremelyLongBooleanC;
    bool resultBoolean;


    function exp() public {
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A ** veryVeryVeryExtremelyExtremelyLongUint256B ** veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A ** veryVeryVeryExtremelyExtremelyLongUint256B * veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A ** veryVeryVeryExtremelyExtremelyLongUint256B / veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A ** veryVeryVeryExtremelyExtremelyLongUint256B % veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A ** veryVeryVeryExtremelyExtremelyLongUint256B + veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A ** veryVeryVeryExtremelyExtremelyLongUint256B - veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A ** veryVeryVeryExtremelyExtremelyLongUint256B << veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A ** veryVeryVeryExtremelyExtremelyLongUint256B >> veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A ** veryVeryVeryExtremelyExtremelyLongUint256B & veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A ** veryVeryVeryExtremelyExtremelyLongUint256B | veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A ** veryVeryVeryExtremelyExtremelyLongUint256B ^ veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A ** veryVeryVeryExtremelyExtremelyLongUint256B == veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A ** veryVeryVeryExtremelyExtremelyLongUint256B != veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A ** veryVeryVeryExtremelyExtremelyLongUint256B < veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A ** veryVeryVeryExtremelyExtremelyLongUint256B <= veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A ** veryVeryVeryExtremelyExtremelyLongUint256B > veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A ** veryVeryVeryExtremelyExtremelyLongUint256B >= veryVeryVeryExtremelyExtremelyLongUint256C;
    }

    function mul() public {
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A * veryVeryVeryExtremelyExtremelyLongUint256B ** veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A * veryVeryVeryExtremelyExtremelyLongUint256B * veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A * veryVeryVeryExtremelyExtremelyLongUint256B / veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A * veryVeryVeryExtremelyExtremelyLongUint256B % veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A * veryVeryVeryExtremelyExtremelyLongUint256B + veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A * veryVeryVeryExtremelyExtremelyLongUint256B - veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A * veryVeryVeryExtremelyExtremelyLongUint256B << veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A * veryVeryVeryExtremelyExtremelyLongUint256B >> veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A * veryVeryVeryExtremelyExtremelyLongUint256B & veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A * veryVeryVeryExtremelyExtremelyLongUint256B | veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A * veryVeryVeryExtremelyExtremelyLongUint256B ^ veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A * veryVeryVeryExtremelyExtremelyLongUint256B == veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A * veryVeryVeryExtremelyExtremelyLongUint256B != veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A * veryVeryVeryExtremelyExtremelyLongUint256B < veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A * veryVeryVeryExtremelyExtremelyLongUint256B <= veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A * veryVeryVeryExtremelyExtremelyLongUint256B > veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A * veryVeryVeryExtremelyExtremelyLongUint256B >= veryVeryVeryExtremelyExtremelyLongUint256C;
    }
    
    function div() public {
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A / veryVeryVeryExtremelyExtremelyLongUint256B ** veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A / veryVeryVeryExtremelyExtremelyLongUint256B * veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A / veryVeryVeryExtremelyExtremelyLongUint256B / veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A / veryVeryVeryExtremelyExtremelyLongUint256B % veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A / veryVeryVeryExtremelyExtremelyLongUint256B + veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A / veryVeryVeryExtremelyExtremelyLongUint256B - veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A / veryVeryVeryExtremelyExtremelyLongUint256B << veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A / veryVeryVeryExtremelyExtremelyLongUint256B >> veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A / veryVeryVeryExtremelyExtremelyLongUint256B & veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A / veryVeryVeryExtremelyExtremelyLongUint256B | veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A / veryVeryVeryExtremelyExtremelyLongUint256B ^ veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A / veryVeryVeryExtremelyExtremelyLongUint256B == veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A / veryVeryVeryExtremelyExtremelyLongUint256B != veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A / veryVeryVeryExtremelyExtremelyLongUint256B < veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A / veryVeryVeryExtremelyExtremelyLongUint256B <= veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A / veryVeryVeryExtremelyExtremelyLongUint256B > veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A / veryVeryVeryExtremelyExtremelyLongUint256B >= veryVeryVeryExtremelyExtremelyLongUint256C;
    }
    
    function mod() public {
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A % veryVeryVeryExtremelyExtremelyLongUint256B ** veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A % veryVeryVeryExtremelyExtremelyLongUint256B * veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A % veryVeryVeryExtremelyExtremelyLongUint256B / veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A % veryVeryVeryExtremelyExtremelyLongUint256B % veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A % veryVeryVeryExtremelyExtremelyLongUint256B + veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A % veryVeryVeryExtremelyExtremelyLongUint256B - veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A % veryVeryVeryExtremelyExtremelyLongUint256B << veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A % veryVeryVeryExtremelyExtremelyLongUint256B >> veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A % veryVeryVeryExtremelyExtremelyLongUint256B & veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A % veryVeryVeryExtremelyExtremelyLongUint256B | veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A % veryVeryVeryExtremelyExtremelyLongUint256B ^ veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A % veryVeryVeryExtremelyExtremelyLongUint256B == veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A % veryVeryVeryExtremelyExtremelyLongUint256B != veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A % veryVeryVeryExtremelyExtremelyLongUint256B < veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A % veryVeryVeryExtremelyExtremelyLongUint256B <= veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A % veryVeryVeryExtremelyExtremelyLongUint256B > veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A % veryVeryVeryExtremelyExtremelyLongUint256B >= veryVeryVeryExtremelyExtremelyLongUint256C;
    }
    
    function add() public {
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A + veryVeryVeryExtremelyExtremelyLongUint256B ** veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A + veryVeryVeryExtremelyExtremelyLongUint256B * veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A + veryVeryVeryExtremelyExtremelyLongUint256B / veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A + veryVeryVeryExtremelyExtremelyLongUint256B % veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A + veryVeryVeryExtremelyExtremelyLongUint256B + veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A + veryVeryVeryExtremelyExtremelyLongUint256B - veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A + veryVeryVeryExtremelyExtremelyLongUint256B << veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A + veryVeryVeryExtremelyExtremelyLongUint256B >> veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A + veryVeryVeryExtremelyExtremelyLongUint256B & veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A + veryVeryVeryExtremelyExtremelyLongUint256B | veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A + veryVeryVeryExtremelyExtremelyLongUint256B ^ veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A + veryVeryVeryExtremelyExtremelyLongUint256B == veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A + veryVeryVeryExtremelyExtremelyLongUint256B != veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A + veryVeryVeryExtremelyExtremelyLongUint256B < veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A + veryVeryVeryExtremelyExtremelyLongUint256B <= veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A + veryVeryVeryExtremelyExtremelyLongUint256B > veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A + veryVeryVeryExtremelyExtremelyLongUint256B >= veryVeryVeryExtremelyExtremelyLongUint256C;
    }

    function sub() public {
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A - veryVeryVeryExtremelyExtremelyLongUint256B ** veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A - veryVeryVeryExtremelyExtremelyLongUint256B * veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A - veryVeryVeryExtremelyExtremelyLongUint256B / veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A - veryVeryVeryExtremelyExtremelyLongUint256B % veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A - veryVeryVeryExtremelyExtremelyLongUint256B + veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A - veryVeryVeryExtremelyExtremelyLongUint256B - veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A - veryVeryVeryExtremelyExtremelyLongUint256B << veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A - veryVeryVeryExtremelyExtremelyLongUint256B >> veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A - veryVeryVeryExtremelyExtremelyLongUint256B & veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A - veryVeryVeryExtremelyExtremelyLongUint256B | veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A - veryVeryVeryExtremelyExtremelyLongUint256B ^ veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A - veryVeryVeryExtremelyExtremelyLongUint256B == veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A - veryVeryVeryExtremelyExtremelyLongUint256B != veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A - veryVeryVeryExtremelyExtremelyLongUint256B < veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A - veryVeryVeryExtremelyExtremelyLongUint256B <= veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A - veryVeryVeryExtremelyExtremelyLongUint256B > veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A - veryVeryVeryExtremelyExtremelyLongUint256B >= veryVeryVeryExtremelyExtremelyLongUint256C;
    }

    function shiftL() public {
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A << veryVeryVeryExtremelyExtremelyLongUint256B ** veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A << veryVeryVeryExtremelyExtremelyLongUint256B * veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A << veryVeryVeryExtremelyExtremelyLongUint256B / veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A << veryVeryVeryExtremelyExtremelyLongUint256B % veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A << veryVeryVeryExtremelyExtremelyLongUint256B + veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A << veryVeryVeryExtremelyExtremelyLongUint256B - veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A << veryVeryVeryExtremelyExtremelyLongUint256B << veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A << veryVeryVeryExtremelyExtremelyLongUint256B >> veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A << veryVeryVeryExtremelyExtremelyLongUint256B & veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A << veryVeryVeryExtremelyExtremelyLongUint256B | veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A << veryVeryVeryExtremelyExtremelyLongUint256B ^ veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A << veryVeryVeryExtremelyExtremelyLongUint256B == veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A << veryVeryVeryExtremelyExtremelyLongUint256B != veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A << veryVeryVeryExtremelyExtremelyLongUint256B < veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A << veryVeryVeryExtremelyExtremelyLongUint256B <= veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A << veryVeryVeryExtremelyExtremelyLongUint256B > veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A << veryVeryVeryExtremelyExtremelyLongUint256B >= veryVeryVeryExtremelyExtremelyLongUint256C;
    }

    function shiftR() public {
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A >> veryVeryVeryExtremelyExtremelyLongUint256B ** veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A >> veryVeryVeryExtremelyExtremelyLongUint256B * veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A >> veryVeryVeryExtremelyExtremelyLongUint256B / veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A >> veryVeryVeryExtremelyExtremelyLongUint256B % veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A >> veryVeryVeryExtremelyExtremelyLongUint256B + veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A >> veryVeryVeryExtremelyExtremelyLongUint256B - veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A >> veryVeryVeryExtremelyExtremelyLongUint256B << veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A >> veryVeryVeryExtremelyExtremelyLongUint256B >> veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A >> veryVeryVeryExtremelyExtremelyLongUint256B & veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A >> veryVeryVeryExtremelyExtremelyLongUint256B | veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A >> veryVeryVeryExtremelyExtremelyLongUint256B ^ veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A >> veryVeryVeryExtremelyExtremelyLongUint256B == veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A >> veryVeryVeryExtremelyExtremelyLongUint256B != veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A >> veryVeryVeryExtremelyExtremelyLongUint256B < veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A >> veryVeryVeryExtremelyExtremelyLongUint256B <= veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A >> veryVeryVeryExtremelyExtremelyLongUint256B > veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A >> veryVeryVeryExtremelyExtremelyLongUint256B >= veryVeryVeryExtremelyExtremelyLongUint256C;
    }

    function bitAnd() public {
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A & veryVeryVeryExtremelyExtremelyLongUint256B ** veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A & veryVeryVeryExtremelyExtremelyLongUint256B * veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A & veryVeryVeryExtremelyExtremelyLongUint256B / veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A & veryVeryVeryExtremelyExtremelyLongUint256B % veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A & veryVeryVeryExtremelyExtremelyLongUint256B + veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A & veryVeryVeryExtremelyExtremelyLongUint256B - veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A & veryVeryVeryExtremelyExtremelyLongUint256B << veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A & veryVeryVeryExtremelyExtremelyLongUint256B >> veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A & veryVeryVeryExtremelyExtremelyLongUint256B & veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A & veryVeryVeryExtremelyExtremelyLongUint256B | veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A & veryVeryVeryExtremelyExtremelyLongUint256B ^ veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A & veryVeryVeryExtremelyExtremelyLongUint256B == veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A & veryVeryVeryExtremelyExtremelyLongUint256B != veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A & veryVeryVeryExtremelyExtremelyLongUint256B < veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A & veryVeryVeryExtremelyExtremelyLongUint256B <= veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A & veryVeryVeryExtremelyExtremelyLongUint256B > veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A & veryVeryVeryExtremelyExtremelyLongUint256B >= veryVeryVeryExtremelyExtremelyLongUint256C;
    }

    function bitOr() public {
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A | veryVeryVeryExtremelyExtremelyLongUint256B ** veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A | veryVeryVeryExtremelyExtremelyLongUint256B * veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A | veryVeryVeryExtremelyExtremelyLongUint256B / veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A | veryVeryVeryExtremelyExtremelyLongUint256B % veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A | veryVeryVeryExtremelyExtremelyLongUint256B + veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A | veryVeryVeryExtremelyExtremelyLongUint256B - veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A | veryVeryVeryExtremelyExtremelyLongUint256B << veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A | veryVeryVeryExtremelyExtremelyLongUint256B >> veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A | veryVeryVeryExtremelyExtremelyLongUint256B & veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A | veryVeryVeryExtremelyExtremelyLongUint256B | veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A | veryVeryVeryExtremelyExtremelyLongUint256B ^ veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A | veryVeryVeryExtremelyExtremelyLongUint256B == veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A | veryVeryVeryExtremelyExtremelyLongUint256B != veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A | veryVeryVeryExtremelyExtremelyLongUint256B < veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A | veryVeryVeryExtremelyExtremelyLongUint256B <= veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A | veryVeryVeryExtremelyExtremelyLongUint256B > veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A | veryVeryVeryExtremelyExtremelyLongUint256B >= veryVeryVeryExtremelyExtremelyLongUint256C;
    }

    function bitXor() public {
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A ^ veryVeryVeryExtremelyExtremelyLongUint256B ** veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A ^ veryVeryVeryExtremelyExtremelyLongUint256B * veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A ^ veryVeryVeryExtremelyExtremelyLongUint256B / veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A ^ veryVeryVeryExtremelyExtremelyLongUint256B % veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A ^ veryVeryVeryExtremelyExtremelyLongUint256B + veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A ^ veryVeryVeryExtremelyExtremelyLongUint256B - veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A ^ veryVeryVeryExtremelyExtremelyLongUint256B << veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A ^ veryVeryVeryExtremelyExtremelyLongUint256B >> veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A ^ veryVeryVeryExtremelyExtremelyLongUint256B & veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A ^ veryVeryVeryExtremelyExtremelyLongUint256B | veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 = veryVeryVeryExtremelyExtremelyLongUint256A ^ veryVeryVeryExtremelyExtremelyLongUint256B ^ veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A ^ veryVeryVeryExtremelyExtremelyLongUint256B == veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A ^ veryVeryVeryExtremelyExtremelyLongUint256B != veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A ^ veryVeryVeryExtremelyExtremelyLongUint256B < veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A ^ veryVeryVeryExtremelyExtremelyLongUint256B <= veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A ^ veryVeryVeryExtremelyExtremelyLongUint256B > veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A ^ veryVeryVeryExtremelyExtremelyLongUint256B >= veryVeryVeryExtremelyExtremelyLongUint256C;
    }

    function equal() public {
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A == veryVeryVeryExtremelyExtremelyLongUint256B ** veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A == veryVeryVeryExtremelyExtremelyLongUint256B * veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A == veryVeryVeryExtremelyExtremelyLongUint256B / veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A == veryVeryVeryExtremelyExtremelyLongUint256B % veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A == veryVeryVeryExtremelyExtremelyLongUint256B + veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A == veryVeryVeryExtremelyExtremelyLongUint256B - veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A == veryVeryVeryExtremelyExtremelyLongUint256B << veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A == veryVeryVeryExtremelyExtremelyLongUint256B >> veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A == veryVeryVeryExtremelyExtremelyLongUint256B & veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A == veryVeryVeryExtremelyExtremelyLongUint256B | veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A == veryVeryVeryExtremelyExtremelyLongUint256B ^ veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A == veryVeryVeryExtremelyExtremelyLongUint256B == veryVeryVeryExtremelyExtremelyLongBooleanC;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A == veryVeryVeryExtremelyExtremelyLongUint256B != veryVeryVeryExtremelyExtremelyLongBooleanC;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongBooleanA == veryVeryVeryExtremelyExtremelyLongUint256B < veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongBooleanA == veryVeryVeryExtremelyExtremelyLongUint256B <= veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongBooleanA == veryVeryVeryExtremelyExtremelyLongUint256B > veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongBooleanA == veryVeryVeryExtremelyExtremelyLongUint256B >= veryVeryVeryExtremelyExtremelyLongUint256C;
    }

    function notEqual() public {
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A != veryVeryVeryExtremelyExtremelyLongUint256B ** veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A != veryVeryVeryExtremelyExtremelyLongUint256B * veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A != veryVeryVeryExtremelyExtremelyLongUint256B / veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A != veryVeryVeryExtremelyExtremelyLongUint256B % veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A != veryVeryVeryExtremelyExtremelyLongUint256B + veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A != veryVeryVeryExtremelyExtremelyLongUint256B - veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A != veryVeryVeryExtremelyExtremelyLongUint256B << veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A != veryVeryVeryExtremelyExtremelyLongUint256B >> veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A != veryVeryVeryExtremelyExtremelyLongUint256B & veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A != veryVeryVeryExtremelyExtremelyLongUint256B | veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A != veryVeryVeryExtremelyExtremelyLongUint256B ^ veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A != veryVeryVeryExtremelyExtremelyLongUint256B == veryVeryVeryExtremelyExtremelyLongBooleanC;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A != veryVeryVeryExtremelyExtremelyLongUint256B != veryVeryVeryExtremelyExtremelyLongBooleanC;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongBooleanA != veryVeryVeryExtremelyExtremelyLongUint256B < veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongBooleanA != veryVeryVeryExtremelyExtremelyLongUint256B <= veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongBooleanA != veryVeryVeryExtremelyExtremelyLongUint256B > veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongBooleanA != veryVeryVeryExtremelyExtremelyLongUint256B >= veryVeryVeryExtremelyExtremelyLongUint256C;
    }

    function lessThan() public {
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A < veryVeryVeryExtremelyExtremelyLongUint256B ** veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A < veryVeryVeryExtremelyExtremelyLongUint256B * veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A < veryVeryVeryExtremelyExtremelyLongUint256B / veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A < veryVeryVeryExtremelyExtremelyLongUint256B % veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A < veryVeryVeryExtremelyExtremelyLongUint256B + veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A < veryVeryVeryExtremelyExtremelyLongUint256B - veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A < veryVeryVeryExtremelyExtremelyLongUint256B << veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A < veryVeryVeryExtremelyExtremelyLongUint256B >> veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A < veryVeryVeryExtremelyExtremelyLongUint256B & veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A < veryVeryVeryExtremelyExtremelyLongUint256B | veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A < veryVeryVeryExtremelyExtremelyLongUint256B ^ veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A < veryVeryVeryExtremelyExtremelyLongUint256B == veryVeryVeryExtremelyExtremelyLongBooleanC;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A < veryVeryVeryExtremelyExtremelyLongUint256B != veryVeryVeryExtremelyExtremelyLongBooleanC;
    }

    function lessThanOrEqual() public {
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A <= veryVeryVeryExtremelyExtremelyLongUint256B ** veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A <= veryVeryVeryExtremelyExtremelyLongUint256B * veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A <= veryVeryVeryExtremelyExtremelyLongUint256B / veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A <= veryVeryVeryExtremelyExtremelyLongUint256B % veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A <= veryVeryVeryExtremelyExtremelyLongUint256B + veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A <= veryVeryVeryExtremelyExtremelyLongUint256B - veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A <= veryVeryVeryExtremelyExtremelyLongUint256B << veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A <= veryVeryVeryExtremelyExtremelyLongUint256B >> veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A <= veryVeryVeryExtremelyExtremelyLongUint256B & veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A <= veryVeryVeryExtremelyExtremelyLongUint256B | veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A <= veryVeryVeryExtremelyExtremelyLongUint256B ^ veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A <= veryVeryVeryExtremelyExtremelyLongUint256B == veryVeryVeryExtremelyExtremelyLongBooleanC;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A <= veryVeryVeryExtremelyExtremelyLongUint256B != veryVeryVeryExtremelyExtremelyLongBooleanC;
    }

    function moreThan() public {
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A > veryVeryVeryExtremelyExtremelyLongUint256B ** veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A > veryVeryVeryExtremelyExtremelyLongUint256B * veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A > veryVeryVeryExtremelyExtremelyLongUint256B / veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A > veryVeryVeryExtremelyExtremelyLongUint256B % veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A > veryVeryVeryExtremelyExtremelyLongUint256B + veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A > veryVeryVeryExtremelyExtremelyLongUint256B - veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A > veryVeryVeryExtremelyExtremelyLongUint256B << veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A > veryVeryVeryExtremelyExtremelyLongUint256B >> veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A > veryVeryVeryExtremelyExtremelyLongUint256B & veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A > veryVeryVeryExtremelyExtremelyLongUint256B | veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A > veryVeryVeryExtremelyExtremelyLongUint256B ^ veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A > veryVeryVeryExtremelyExtremelyLongUint256B == veryVeryVeryExtremelyExtremelyLongBooleanC;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A > veryVeryVeryExtremelyExtremelyLongUint256B != veryVeryVeryExtremelyExtremelyLongBooleanC;
    }

    function moreThanOrEqual() public {
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A >= veryVeryVeryExtremelyExtremelyLongUint256B ** veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A >= veryVeryVeryExtremelyExtremelyLongUint256B * veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A >= veryVeryVeryExtremelyExtremelyLongUint256B / veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A >= veryVeryVeryExtremelyExtremelyLongUint256B % veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A >= veryVeryVeryExtremelyExtremelyLongUint256B + veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A >= veryVeryVeryExtremelyExtremelyLongUint256B - veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A >= veryVeryVeryExtremelyExtremelyLongUint256B << veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A >= veryVeryVeryExtremelyExtremelyLongUint256B >> veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A >= veryVeryVeryExtremelyExtremelyLongUint256B & veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A >= veryVeryVeryExtremelyExtremelyLongUint256B | veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A >= veryVeryVeryExtremelyExtremelyLongUint256B ^ veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A >= veryVeryVeryExtremelyExtremelyLongUint256B == veryVeryVeryExtremelyExtremelyLongBooleanC;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongUint256A >= veryVeryVeryExtremelyExtremelyLongUint256B != veryVeryVeryExtremelyExtremelyLongBooleanC;
    }

    function logic() public  {
        resultBoolean = veryVeryVeryExtremelyExtremelyLongBooleanA || veryVeryVeryExtremelyExtremelyLongBooleanB || veryVeryVeryExtremelyExtremelyLongBooleanC;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongBooleanA || veryVeryVeryExtremelyExtremelyLongBooleanB && veryVeryVeryExtremelyExtremelyLongBooleanC;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongBooleanA || veryVeryVeryExtremelyExtremelyLongBooleanB == veryVeryVeryExtremelyExtremelyLongBooleanC;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongBooleanA || veryVeryVeryExtremelyExtremelyLongBooleanB != veryVeryVeryExtremelyExtremelyLongBooleanC;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongBooleanA && veryVeryVeryExtremelyExtremelyLongBooleanB || veryVeryVeryExtremelyExtremelyLongBooleanC;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongBooleanA && veryVeryVeryExtremelyExtremelyLongBooleanB && veryVeryVeryExtremelyExtremelyLongBooleanC;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongBooleanA && veryVeryVeryExtremelyExtremelyLongBooleanB == veryVeryVeryExtremelyExtremelyLongBooleanC;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongBooleanA && veryVeryVeryExtremelyExtremelyLongBooleanB != veryVeryVeryExtremelyExtremelyLongBooleanC;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongBooleanA == veryVeryVeryExtremelyExtremelyLongBooleanB || veryVeryVeryExtremelyExtremelyLongBooleanC;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongBooleanA == veryVeryVeryExtremelyExtremelyLongBooleanB && veryVeryVeryExtremelyExtremelyLongBooleanC;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongBooleanA != veryVeryVeryExtremelyExtremelyLongBooleanB || veryVeryVeryExtremelyExtremelyLongBooleanC;
        resultBoolean = veryVeryVeryExtremelyExtremelyLongBooleanA != veryVeryVeryExtremelyExtremelyLongBooleanB && veryVeryVeryExtremelyExtremelyLongBooleanC;
    }
}
=====================================output=====================================
// SPDX-License-Identifier: MIT
pragma solidity 0.8.28;

contract Indent {
    uint256 veryVeryVeryExtremelyExtremelyLongUint256A;
    uint256 veryVeryVeryExtremelyExtremelyLongUint256B;
    uint256 veryVeryVeryExtremelyExtremelyLongUint256C;
    uint256 resultUint256;
    bool veryVeryVeryExtremelyExtremelyLongBooleanA;
    bool veryVeryVeryExtremelyExtremelyLongBooleanB;
    bool veryVeryVeryExtremelyExtremelyLongBooleanC;
    bool resultBoolean;

    function exp() public {
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A **
                (veryVeryVeryExtremelyExtremelyLongUint256B **
                    veryVeryVeryExtremelyExtremelyLongUint256C);
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A **
                veryVeryVeryExtremelyExtremelyLongUint256B *
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A **
                veryVeryVeryExtremelyExtremelyLongUint256B /
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A **
                veryVeryVeryExtremelyExtremelyLongUint256B %
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A **
                veryVeryVeryExtremelyExtremelyLongUint256B +
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A **
                veryVeryVeryExtremelyExtremelyLongUint256B -
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            (veryVeryVeryExtremelyExtremelyLongUint256A **
                veryVeryVeryExtremelyExtremelyLongUint256B) <<
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            (veryVeryVeryExtremelyExtremelyLongUint256A **
                veryVeryVeryExtremelyExtremelyLongUint256B) >>
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            (veryVeryVeryExtremelyExtremelyLongUint256A **
                veryVeryVeryExtremelyExtremelyLongUint256B) &
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            (veryVeryVeryExtremelyExtremelyLongUint256A **
                veryVeryVeryExtremelyExtremelyLongUint256B) |
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            (veryVeryVeryExtremelyExtremelyLongUint256A **
                veryVeryVeryExtremelyExtremelyLongUint256B) ^
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A **
                veryVeryVeryExtremelyExtremelyLongUint256B ==
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A **
                veryVeryVeryExtremelyExtremelyLongUint256B !=
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A **
                veryVeryVeryExtremelyExtremelyLongUint256B <
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A **
                veryVeryVeryExtremelyExtremelyLongUint256B <=
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A **
                veryVeryVeryExtremelyExtremelyLongUint256B >
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A **
                veryVeryVeryExtremelyExtremelyLongUint256B >=
            veryVeryVeryExtremelyExtremelyLongUint256C;
    }

    function mul() public {
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A *
            veryVeryVeryExtremelyExtremelyLongUint256B **
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A *
            veryVeryVeryExtremelyExtremelyLongUint256B *
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            (veryVeryVeryExtremelyExtremelyLongUint256A *
                veryVeryVeryExtremelyExtremelyLongUint256B) /
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            (veryVeryVeryExtremelyExtremelyLongUint256A *
                veryVeryVeryExtremelyExtremelyLongUint256B) %
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A *
            veryVeryVeryExtremelyExtremelyLongUint256B +
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A *
            veryVeryVeryExtremelyExtremelyLongUint256B -
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            (veryVeryVeryExtremelyExtremelyLongUint256A *
                veryVeryVeryExtremelyExtremelyLongUint256B) <<
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            (veryVeryVeryExtremelyExtremelyLongUint256A *
                veryVeryVeryExtremelyExtremelyLongUint256B) >>
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            (veryVeryVeryExtremelyExtremelyLongUint256A *
                veryVeryVeryExtremelyExtremelyLongUint256B) &
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            (veryVeryVeryExtremelyExtremelyLongUint256A *
                veryVeryVeryExtremelyExtremelyLongUint256B) |
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            (veryVeryVeryExtremelyExtremelyLongUint256A *
                veryVeryVeryExtremelyExtremelyLongUint256B) ^
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A *
                veryVeryVeryExtremelyExtremelyLongUint256B ==
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A *
                veryVeryVeryExtremelyExtremelyLongUint256B !=
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A *
                veryVeryVeryExtremelyExtremelyLongUint256B <
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A *
                veryVeryVeryExtremelyExtremelyLongUint256B <=
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A *
                veryVeryVeryExtremelyExtremelyLongUint256B >
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A *
                veryVeryVeryExtremelyExtremelyLongUint256B >=
            veryVeryVeryExtremelyExtremelyLongUint256C;
    }

    function div() public {
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A /
            veryVeryVeryExtremelyExtremelyLongUint256B **
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            (veryVeryVeryExtremelyExtremelyLongUint256A /
                veryVeryVeryExtremelyExtremelyLongUint256B) *
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A /
            veryVeryVeryExtremelyExtremelyLongUint256B /
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            (veryVeryVeryExtremelyExtremelyLongUint256A /
                veryVeryVeryExtremelyExtremelyLongUint256B) %
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A /
            veryVeryVeryExtremelyExtremelyLongUint256B +
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A /
            veryVeryVeryExtremelyExtremelyLongUint256B -
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            (veryVeryVeryExtremelyExtremelyLongUint256A /
                veryVeryVeryExtremelyExtremelyLongUint256B) <<
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            (veryVeryVeryExtremelyExtremelyLongUint256A /
                veryVeryVeryExtremelyExtremelyLongUint256B) >>
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            (veryVeryVeryExtremelyExtremelyLongUint256A /
                veryVeryVeryExtremelyExtremelyLongUint256B) &
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            (veryVeryVeryExtremelyExtremelyLongUint256A /
                veryVeryVeryExtremelyExtremelyLongUint256B) |
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            (veryVeryVeryExtremelyExtremelyLongUint256A /
                veryVeryVeryExtremelyExtremelyLongUint256B) ^
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A /
                veryVeryVeryExtremelyExtremelyLongUint256B ==
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A /
                veryVeryVeryExtremelyExtremelyLongUint256B !=
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A /
                veryVeryVeryExtremelyExtremelyLongUint256B <
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A /
                veryVeryVeryExtremelyExtremelyLongUint256B <=
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A /
                veryVeryVeryExtremelyExtremelyLongUint256B >
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A /
                veryVeryVeryExtremelyExtremelyLongUint256B >=
            veryVeryVeryExtremelyExtremelyLongUint256C;
    }

    function mod() public {
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A %
            veryVeryVeryExtremelyExtremelyLongUint256B **
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            (veryVeryVeryExtremelyExtremelyLongUint256A %
                veryVeryVeryExtremelyExtremelyLongUint256B) *
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            (veryVeryVeryExtremelyExtremelyLongUint256A %
                veryVeryVeryExtremelyExtremelyLongUint256B) /
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            (veryVeryVeryExtremelyExtremelyLongUint256A %
                veryVeryVeryExtremelyExtremelyLongUint256B) %
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            (veryVeryVeryExtremelyExtremelyLongUint256A %
                veryVeryVeryExtremelyExtremelyLongUint256B) +
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            (veryVeryVeryExtremelyExtremelyLongUint256A %
                veryVeryVeryExtremelyExtremelyLongUint256B) -
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A %
            veryVeryVeryExtremelyExtremelyLongUint256B <<
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A %
            veryVeryVeryExtremelyExtremelyLongUint256B >>
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A %
            veryVeryVeryExtremelyExtremelyLongUint256B &
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A %
            veryVeryVeryExtremelyExtremelyLongUint256B |
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A %
            veryVeryVeryExtremelyExtremelyLongUint256B ^
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A %
                veryVeryVeryExtremelyExtremelyLongUint256B ==
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A %
                veryVeryVeryExtremelyExtremelyLongUint256B !=
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A %
                veryVeryVeryExtremelyExtremelyLongUint256B <
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A %
                veryVeryVeryExtremelyExtremelyLongUint256B <=
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A %
                veryVeryVeryExtremelyExtremelyLongUint256B >
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A %
                veryVeryVeryExtremelyExtremelyLongUint256B >=
            veryVeryVeryExtremelyExtremelyLongUint256C;
    }

    function add() public {
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A +
            veryVeryVeryExtremelyExtremelyLongUint256B **
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A +
            veryVeryVeryExtremelyExtremelyLongUint256B *
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A +
            veryVeryVeryExtremelyExtremelyLongUint256B /
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A +
            (veryVeryVeryExtremelyExtremelyLongUint256B %
                veryVeryVeryExtremelyExtremelyLongUint256C);
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A +
            veryVeryVeryExtremelyExtremelyLongUint256B +
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A +
            veryVeryVeryExtremelyExtremelyLongUint256B -
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            (veryVeryVeryExtremelyExtremelyLongUint256A +
                veryVeryVeryExtremelyExtremelyLongUint256B) <<
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            (veryVeryVeryExtremelyExtremelyLongUint256A +
                veryVeryVeryExtremelyExtremelyLongUint256B) >>
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            (veryVeryVeryExtremelyExtremelyLongUint256A +
                veryVeryVeryExtremelyExtremelyLongUint256B) &
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            (veryVeryVeryExtremelyExtremelyLongUint256A +
                veryVeryVeryExtremelyExtremelyLongUint256B) |
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            (veryVeryVeryExtremelyExtremelyLongUint256A +
                veryVeryVeryExtremelyExtremelyLongUint256B) ^
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A +
                veryVeryVeryExtremelyExtremelyLongUint256B ==
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A +
                veryVeryVeryExtremelyExtremelyLongUint256B !=
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A +
                veryVeryVeryExtremelyExtremelyLongUint256B <
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A +
                veryVeryVeryExtremelyExtremelyLongUint256B <=
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A +
                veryVeryVeryExtremelyExtremelyLongUint256B >
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A +
                veryVeryVeryExtremelyExtremelyLongUint256B >=
            veryVeryVeryExtremelyExtremelyLongUint256C;
    }

    function sub() public {
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A -
            veryVeryVeryExtremelyExtremelyLongUint256B **
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A -
            veryVeryVeryExtremelyExtremelyLongUint256B *
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A -
            veryVeryVeryExtremelyExtremelyLongUint256B /
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A -
            (veryVeryVeryExtremelyExtremelyLongUint256B %
                veryVeryVeryExtremelyExtremelyLongUint256C);
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A -
            veryVeryVeryExtremelyExtremelyLongUint256B +
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A -
            veryVeryVeryExtremelyExtremelyLongUint256B -
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            (veryVeryVeryExtremelyExtremelyLongUint256A -
                veryVeryVeryExtremelyExtremelyLongUint256B) <<
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            (veryVeryVeryExtremelyExtremelyLongUint256A -
                veryVeryVeryExtremelyExtremelyLongUint256B) >>
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            (veryVeryVeryExtremelyExtremelyLongUint256A -
                veryVeryVeryExtremelyExtremelyLongUint256B) &
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            (veryVeryVeryExtremelyExtremelyLongUint256A -
                veryVeryVeryExtremelyExtremelyLongUint256B) |
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            (veryVeryVeryExtremelyExtremelyLongUint256A -
                veryVeryVeryExtremelyExtremelyLongUint256B) ^
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A -
                veryVeryVeryExtremelyExtremelyLongUint256B ==
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A -
                veryVeryVeryExtremelyExtremelyLongUint256B !=
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A -
                veryVeryVeryExtremelyExtremelyLongUint256B <
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A -
                veryVeryVeryExtremelyExtremelyLongUint256B <=
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A -
                veryVeryVeryExtremelyExtremelyLongUint256B >
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A -
                veryVeryVeryExtremelyExtremelyLongUint256B >=
            veryVeryVeryExtremelyExtremelyLongUint256C;
    }

    function shiftL() public {
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A <<
            (veryVeryVeryExtremelyExtremelyLongUint256B **
                veryVeryVeryExtremelyExtremelyLongUint256C);
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A <<
            (veryVeryVeryExtremelyExtremelyLongUint256B *
                veryVeryVeryExtremelyExtremelyLongUint256C);
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A <<
            (veryVeryVeryExtremelyExtremelyLongUint256B /
                veryVeryVeryExtremelyExtremelyLongUint256C);
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A <<
            veryVeryVeryExtremelyExtremelyLongUint256B %
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A <<
            (veryVeryVeryExtremelyExtremelyLongUint256B +
                veryVeryVeryExtremelyExtremelyLongUint256C);
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A <<
            (veryVeryVeryExtremelyExtremelyLongUint256B -
                veryVeryVeryExtremelyExtremelyLongUint256C);
        resultUint256 =
            (veryVeryVeryExtremelyExtremelyLongUint256A <<
                veryVeryVeryExtremelyExtremelyLongUint256B) <<
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            (veryVeryVeryExtremelyExtremelyLongUint256A <<
                veryVeryVeryExtremelyExtremelyLongUint256B) >>
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            (veryVeryVeryExtremelyExtremelyLongUint256A <<
                veryVeryVeryExtremelyExtremelyLongUint256B) &
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            (veryVeryVeryExtremelyExtremelyLongUint256A <<
                veryVeryVeryExtremelyExtremelyLongUint256B) |
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            (veryVeryVeryExtremelyExtremelyLongUint256A <<
                veryVeryVeryExtremelyExtremelyLongUint256B) ^
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A <<
                veryVeryVeryExtremelyExtremelyLongUint256B ==
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A <<
                veryVeryVeryExtremelyExtremelyLongUint256B !=
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A <<
                veryVeryVeryExtremelyExtremelyLongUint256B <
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A <<
                veryVeryVeryExtremelyExtremelyLongUint256B <=
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A <<
                veryVeryVeryExtremelyExtremelyLongUint256B >
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A <<
                veryVeryVeryExtremelyExtremelyLongUint256B >=
            veryVeryVeryExtremelyExtremelyLongUint256C;
    }

    function shiftR() public {
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A >>
            (veryVeryVeryExtremelyExtremelyLongUint256B **
                veryVeryVeryExtremelyExtremelyLongUint256C);
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A >>
            (veryVeryVeryExtremelyExtremelyLongUint256B *
                veryVeryVeryExtremelyExtremelyLongUint256C);
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A >>
            (veryVeryVeryExtremelyExtremelyLongUint256B /
                veryVeryVeryExtremelyExtremelyLongUint256C);
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A >>
            veryVeryVeryExtremelyExtremelyLongUint256B %
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A >>
            (veryVeryVeryExtremelyExtremelyLongUint256B +
                veryVeryVeryExtremelyExtremelyLongUint256C);
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A >>
            (veryVeryVeryExtremelyExtremelyLongUint256B -
                veryVeryVeryExtremelyExtremelyLongUint256C);
        resultUint256 =
            (veryVeryVeryExtremelyExtremelyLongUint256A >>
                veryVeryVeryExtremelyExtremelyLongUint256B) <<
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            (veryVeryVeryExtremelyExtremelyLongUint256A >>
                veryVeryVeryExtremelyExtremelyLongUint256B) >>
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            (veryVeryVeryExtremelyExtremelyLongUint256A >>
                veryVeryVeryExtremelyExtremelyLongUint256B) &
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            (veryVeryVeryExtremelyExtremelyLongUint256A >>
                veryVeryVeryExtremelyExtremelyLongUint256B) |
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            (veryVeryVeryExtremelyExtremelyLongUint256A >>
                veryVeryVeryExtremelyExtremelyLongUint256B) ^
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A >>
                veryVeryVeryExtremelyExtremelyLongUint256B ==
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A >>
                veryVeryVeryExtremelyExtremelyLongUint256B !=
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A >>
                veryVeryVeryExtremelyExtremelyLongUint256B <
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A >>
                veryVeryVeryExtremelyExtremelyLongUint256B <=
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A >>
                veryVeryVeryExtremelyExtremelyLongUint256B >
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A >>
                veryVeryVeryExtremelyExtremelyLongUint256B >=
            veryVeryVeryExtremelyExtremelyLongUint256C;
    }

    function bitAnd() public {
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A &
            (veryVeryVeryExtremelyExtremelyLongUint256B **
                veryVeryVeryExtremelyExtremelyLongUint256C);
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A &
            (veryVeryVeryExtremelyExtremelyLongUint256B *
                veryVeryVeryExtremelyExtremelyLongUint256C);
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A &
            (veryVeryVeryExtremelyExtremelyLongUint256B /
                veryVeryVeryExtremelyExtremelyLongUint256C);
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A &
            veryVeryVeryExtremelyExtremelyLongUint256B %
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A &
            (veryVeryVeryExtremelyExtremelyLongUint256B +
                veryVeryVeryExtremelyExtremelyLongUint256C);
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A &
            (veryVeryVeryExtremelyExtremelyLongUint256B -
                veryVeryVeryExtremelyExtremelyLongUint256C);
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A &
            (veryVeryVeryExtremelyExtremelyLongUint256B <<
                veryVeryVeryExtremelyExtremelyLongUint256C);
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A &
            (veryVeryVeryExtremelyExtremelyLongUint256B >>
                veryVeryVeryExtremelyExtremelyLongUint256C);
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A &
            veryVeryVeryExtremelyExtremelyLongUint256B &
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            (veryVeryVeryExtremelyExtremelyLongUint256A &
                veryVeryVeryExtremelyExtremelyLongUint256B) |
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            (veryVeryVeryExtremelyExtremelyLongUint256A &
                veryVeryVeryExtremelyExtremelyLongUint256B) ^
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A &
                veryVeryVeryExtremelyExtremelyLongUint256B ==
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A &
                veryVeryVeryExtremelyExtremelyLongUint256B !=
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A &
                veryVeryVeryExtremelyExtremelyLongUint256B <
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A &
                veryVeryVeryExtremelyExtremelyLongUint256B <=
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A &
                veryVeryVeryExtremelyExtremelyLongUint256B >
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A &
                veryVeryVeryExtremelyExtremelyLongUint256B >=
            veryVeryVeryExtremelyExtremelyLongUint256C;
    }

    function bitOr() public {
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A |
            (veryVeryVeryExtremelyExtremelyLongUint256B **
                veryVeryVeryExtremelyExtremelyLongUint256C);
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A |
            (veryVeryVeryExtremelyExtremelyLongUint256B *
                veryVeryVeryExtremelyExtremelyLongUint256C);
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A |
            (veryVeryVeryExtremelyExtremelyLongUint256B /
                veryVeryVeryExtremelyExtremelyLongUint256C);
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A |
            veryVeryVeryExtremelyExtremelyLongUint256B %
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A |
            (veryVeryVeryExtremelyExtremelyLongUint256B +
                veryVeryVeryExtremelyExtremelyLongUint256C);
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A |
            (veryVeryVeryExtremelyExtremelyLongUint256B -
                veryVeryVeryExtremelyExtremelyLongUint256C);
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A |
            (veryVeryVeryExtremelyExtremelyLongUint256B <<
                veryVeryVeryExtremelyExtremelyLongUint256C);
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A |
            (veryVeryVeryExtremelyExtremelyLongUint256B >>
                veryVeryVeryExtremelyExtremelyLongUint256C);
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A |
            (veryVeryVeryExtremelyExtremelyLongUint256B &
                veryVeryVeryExtremelyExtremelyLongUint256C);
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A |
            veryVeryVeryExtremelyExtremelyLongUint256B |
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A |
            (veryVeryVeryExtremelyExtremelyLongUint256B ^
                veryVeryVeryExtremelyExtremelyLongUint256C);
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A |
                veryVeryVeryExtremelyExtremelyLongUint256B ==
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A |
                veryVeryVeryExtremelyExtremelyLongUint256B !=
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A |
                veryVeryVeryExtremelyExtremelyLongUint256B <
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A |
                veryVeryVeryExtremelyExtremelyLongUint256B <=
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A |
                veryVeryVeryExtremelyExtremelyLongUint256B >
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A |
                veryVeryVeryExtremelyExtremelyLongUint256B >=
            veryVeryVeryExtremelyExtremelyLongUint256C;
    }

    function bitXor() public {
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A ^
            (veryVeryVeryExtremelyExtremelyLongUint256B **
                veryVeryVeryExtremelyExtremelyLongUint256C);
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A ^
            (veryVeryVeryExtremelyExtremelyLongUint256B *
                veryVeryVeryExtremelyExtremelyLongUint256C);
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A ^
            (veryVeryVeryExtremelyExtremelyLongUint256B /
                veryVeryVeryExtremelyExtremelyLongUint256C);
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A ^
            veryVeryVeryExtremelyExtremelyLongUint256B %
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A ^
            (veryVeryVeryExtremelyExtremelyLongUint256B +
                veryVeryVeryExtremelyExtremelyLongUint256C);
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A ^
            (veryVeryVeryExtremelyExtremelyLongUint256B -
                veryVeryVeryExtremelyExtremelyLongUint256C);
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A ^
            (veryVeryVeryExtremelyExtremelyLongUint256B <<
                veryVeryVeryExtremelyExtremelyLongUint256C);
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A ^
            (veryVeryVeryExtremelyExtremelyLongUint256B >>
                veryVeryVeryExtremelyExtremelyLongUint256C);
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A ^
            (veryVeryVeryExtremelyExtremelyLongUint256B &
                veryVeryVeryExtremelyExtremelyLongUint256C);
        resultUint256 =
            (veryVeryVeryExtremelyExtremelyLongUint256A ^
                veryVeryVeryExtremelyExtremelyLongUint256B) |
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultUint256 =
            veryVeryVeryExtremelyExtremelyLongUint256A ^
            veryVeryVeryExtremelyExtremelyLongUint256B ^
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A ^
                veryVeryVeryExtremelyExtremelyLongUint256B ==
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A ^
                veryVeryVeryExtremelyExtremelyLongUint256B !=
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A ^
                veryVeryVeryExtremelyExtremelyLongUint256B <
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A ^
                veryVeryVeryExtremelyExtremelyLongUint256B <=
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A ^
                veryVeryVeryExtremelyExtremelyLongUint256B >
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A ^
                veryVeryVeryExtremelyExtremelyLongUint256B >=
            veryVeryVeryExtremelyExtremelyLongUint256C;
    }

    function equal() public {
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A ==
            veryVeryVeryExtremelyExtremelyLongUint256B **
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A ==
            veryVeryVeryExtremelyExtremelyLongUint256B *
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A ==
            veryVeryVeryExtremelyExtremelyLongUint256B /
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A ==
            veryVeryVeryExtremelyExtremelyLongUint256B %
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A ==
            veryVeryVeryExtremelyExtremelyLongUint256B +
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A ==
            veryVeryVeryExtremelyExtremelyLongUint256B -
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A ==
            veryVeryVeryExtremelyExtremelyLongUint256B <<
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A ==
            veryVeryVeryExtremelyExtremelyLongUint256B >>
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A ==
            veryVeryVeryExtremelyExtremelyLongUint256B &
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A ==
            veryVeryVeryExtremelyExtremelyLongUint256B |
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A ==
            veryVeryVeryExtremelyExtremelyLongUint256B ^
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            (veryVeryVeryExtremelyExtremelyLongUint256A ==
                veryVeryVeryExtremelyExtremelyLongUint256B) ==
            veryVeryVeryExtremelyExtremelyLongBooleanC;
        resultBoolean =
            (veryVeryVeryExtremelyExtremelyLongUint256A ==
                veryVeryVeryExtremelyExtremelyLongUint256B) !=
            veryVeryVeryExtremelyExtremelyLongBooleanC;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongBooleanA ==
            veryVeryVeryExtremelyExtremelyLongUint256B <
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongBooleanA ==
            veryVeryVeryExtremelyExtremelyLongUint256B <=
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongBooleanA ==
            veryVeryVeryExtremelyExtremelyLongUint256B >
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongBooleanA ==
            veryVeryVeryExtremelyExtremelyLongUint256B >=
            veryVeryVeryExtremelyExtremelyLongUint256C;
    }

    function notEqual() public {
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A !=
            veryVeryVeryExtremelyExtremelyLongUint256B **
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A !=
            veryVeryVeryExtremelyExtremelyLongUint256B *
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A !=
            veryVeryVeryExtremelyExtremelyLongUint256B /
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A !=
            veryVeryVeryExtremelyExtremelyLongUint256B %
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A !=
            veryVeryVeryExtremelyExtremelyLongUint256B +
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A !=
            veryVeryVeryExtremelyExtremelyLongUint256B -
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A !=
            veryVeryVeryExtremelyExtremelyLongUint256B <<
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A !=
            veryVeryVeryExtremelyExtremelyLongUint256B >>
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A !=
            veryVeryVeryExtremelyExtremelyLongUint256B &
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A !=
            veryVeryVeryExtremelyExtremelyLongUint256B |
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A !=
            veryVeryVeryExtremelyExtremelyLongUint256B ^
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            (veryVeryVeryExtremelyExtremelyLongUint256A !=
                veryVeryVeryExtremelyExtremelyLongUint256B) ==
            veryVeryVeryExtremelyExtremelyLongBooleanC;
        resultBoolean =
            (veryVeryVeryExtremelyExtremelyLongUint256A !=
                veryVeryVeryExtremelyExtremelyLongUint256B) !=
            veryVeryVeryExtremelyExtremelyLongBooleanC;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongBooleanA !=
            veryVeryVeryExtremelyExtremelyLongUint256B <
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongBooleanA !=
            veryVeryVeryExtremelyExtremelyLongUint256B <=
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongBooleanA !=
            veryVeryVeryExtremelyExtremelyLongUint256B >
            veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongBooleanA !=
            veryVeryVeryExtremelyExtremelyLongUint256B >=
            veryVeryVeryExtremelyExtremelyLongUint256C;
    }

    function lessThan() public {
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A <
            veryVeryVeryExtremelyExtremelyLongUint256B **
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A <
            veryVeryVeryExtremelyExtremelyLongUint256B *
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A <
            veryVeryVeryExtremelyExtremelyLongUint256B /
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A <
            veryVeryVeryExtremelyExtremelyLongUint256B %
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A <
            veryVeryVeryExtremelyExtremelyLongUint256B +
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A <
            veryVeryVeryExtremelyExtremelyLongUint256B -
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A <
            veryVeryVeryExtremelyExtremelyLongUint256B <<
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A <
            veryVeryVeryExtremelyExtremelyLongUint256B >>
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A <
            veryVeryVeryExtremelyExtremelyLongUint256B &
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A <
            veryVeryVeryExtremelyExtremelyLongUint256B |
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A <
            veryVeryVeryExtremelyExtremelyLongUint256B ^
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A <
            veryVeryVeryExtremelyExtremelyLongUint256B ==
            veryVeryVeryExtremelyExtremelyLongBooleanC;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A <
            veryVeryVeryExtremelyExtremelyLongUint256B !=
            veryVeryVeryExtremelyExtremelyLongBooleanC;
    }

    function lessThanOrEqual() public {
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A <=
            veryVeryVeryExtremelyExtremelyLongUint256B **
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A <=
            veryVeryVeryExtremelyExtremelyLongUint256B *
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A <=
            veryVeryVeryExtremelyExtremelyLongUint256B /
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A <=
            veryVeryVeryExtremelyExtremelyLongUint256B %
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A <=
            veryVeryVeryExtremelyExtremelyLongUint256B +
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A <=
            veryVeryVeryExtremelyExtremelyLongUint256B -
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A <=
            veryVeryVeryExtremelyExtremelyLongUint256B <<
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A <=
            veryVeryVeryExtremelyExtremelyLongUint256B >>
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A <=
            veryVeryVeryExtremelyExtremelyLongUint256B &
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A <=
            veryVeryVeryExtremelyExtremelyLongUint256B |
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A <=
            veryVeryVeryExtremelyExtremelyLongUint256B ^
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A <=
            veryVeryVeryExtremelyExtremelyLongUint256B ==
            veryVeryVeryExtremelyExtremelyLongBooleanC;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A <=
            veryVeryVeryExtremelyExtremelyLongUint256B !=
            veryVeryVeryExtremelyExtremelyLongBooleanC;
    }

    function moreThan() public {
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A >
            veryVeryVeryExtremelyExtremelyLongUint256B **
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A >
            veryVeryVeryExtremelyExtremelyLongUint256B *
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A >
            veryVeryVeryExtremelyExtremelyLongUint256B /
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A >
            veryVeryVeryExtremelyExtremelyLongUint256B %
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A >
            veryVeryVeryExtremelyExtremelyLongUint256B +
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A >
            veryVeryVeryExtremelyExtremelyLongUint256B -
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A >
            veryVeryVeryExtremelyExtremelyLongUint256B <<
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A >
            veryVeryVeryExtremelyExtremelyLongUint256B >>
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A >
            veryVeryVeryExtremelyExtremelyLongUint256B &
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A >
            veryVeryVeryExtremelyExtremelyLongUint256B |
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A >
            veryVeryVeryExtremelyExtremelyLongUint256B ^
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A >
            veryVeryVeryExtremelyExtremelyLongUint256B ==
            veryVeryVeryExtremelyExtremelyLongBooleanC;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A >
            veryVeryVeryExtremelyExtremelyLongUint256B !=
            veryVeryVeryExtremelyExtremelyLongBooleanC;
    }

    function moreThanOrEqual() public {
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A >=
            veryVeryVeryExtremelyExtremelyLongUint256B **
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A >=
            veryVeryVeryExtremelyExtremelyLongUint256B *
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A >=
            veryVeryVeryExtremelyExtremelyLongUint256B /
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A >=
            veryVeryVeryExtremelyExtremelyLongUint256B %
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A >=
            veryVeryVeryExtremelyExtremelyLongUint256B +
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A >=
            veryVeryVeryExtremelyExtremelyLongUint256B -
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A >=
            veryVeryVeryExtremelyExtremelyLongUint256B <<
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A >=
            veryVeryVeryExtremelyExtremelyLongUint256B >>
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A >=
            veryVeryVeryExtremelyExtremelyLongUint256B &
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A >=
            veryVeryVeryExtremelyExtremelyLongUint256B |
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A >=
            veryVeryVeryExtremelyExtremelyLongUint256B ^
                veryVeryVeryExtremelyExtremelyLongUint256C;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A >=
            veryVeryVeryExtremelyExtremelyLongUint256B ==
            veryVeryVeryExtremelyExtremelyLongBooleanC;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongUint256A >=
            veryVeryVeryExtremelyExtremelyLongUint256B !=
            veryVeryVeryExtremelyExtremelyLongBooleanC;
    }

    function logic() public {
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongBooleanA ||
            veryVeryVeryExtremelyExtremelyLongBooleanB ||
            veryVeryVeryExtremelyExtremelyLongBooleanC;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongBooleanA ||
            (veryVeryVeryExtremelyExtremelyLongBooleanB &&
                veryVeryVeryExtremelyExtremelyLongBooleanC);
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongBooleanA ||
            veryVeryVeryExtremelyExtremelyLongBooleanB ==
            veryVeryVeryExtremelyExtremelyLongBooleanC;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongBooleanA ||
            veryVeryVeryExtremelyExtremelyLongBooleanB !=
            veryVeryVeryExtremelyExtremelyLongBooleanC;
        resultBoolean =
            (veryVeryVeryExtremelyExtremelyLongBooleanA &&
                veryVeryVeryExtremelyExtremelyLongBooleanB) ||
            veryVeryVeryExtremelyExtremelyLongBooleanC;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongBooleanA &&
            veryVeryVeryExtremelyExtremelyLongBooleanB &&
            veryVeryVeryExtremelyExtremelyLongBooleanC;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongBooleanA &&
            veryVeryVeryExtremelyExtremelyLongBooleanB ==
            veryVeryVeryExtremelyExtremelyLongBooleanC;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongBooleanA &&
            veryVeryVeryExtremelyExtremelyLongBooleanB !=
            veryVeryVeryExtremelyExtremelyLongBooleanC;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongBooleanA ==
            veryVeryVeryExtremelyExtremelyLongBooleanB ||
            veryVeryVeryExtremelyExtremelyLongBooleanC;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongBooleanA ==
            veryVeryVeryExtremelyExtremelyLongBooleanB &&
            veryVeryVeryExtremelyExtremelyLongBooleanC;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongBooleanA !=
            veryVeryVeryExtremelyExtremelyLongBooleanB ||
            veryVeryVeryExtremelyExtremelyLongBooleanC;
        resultBoolean =
            veryVeryVeryExtremelyExtremelyLongBooleanA !=
            veryVeryVeryExtremelyExtremelyLongBooleanB &&
            veryVeryVeryExtremelyExtremelyLongBooleanC;
    }
}

================================================================================
`;
