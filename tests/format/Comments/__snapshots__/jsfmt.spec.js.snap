// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Comments.sol format 1`] = `
====================================options=====================================
parsers: ["solidity-parse"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
pragma solidity ^0.4.24;


contract Comments1 {
    function() {
        // solhint-disable-previous-line no-empty-blocks
    }

    function hello() public modifier1 modifier2 modifier3 modifier4 modifier5 modifier6 {
        // solhint-disable-previous-line no-empty-blocks
    }
}


contract Comments2 {
    // solhint-disable-previous-line no-empty-blocks
}


contract Comments3 is Interface1, Interface2, Interface3, Interface4, Interface5, Interface6 {
  // solhint-disable-previous-line no-empty-blocks

  function someFunction() {

  }/*1*//*2
  */
}

contract Comments4 is Interface1, Interface2, Interface3, Interface4, Interface5, Interface6 {
  // solhint-disable-previous-line no-empty-blocks
}

contract Comments5 /*nice name*/ {
  // solhint-disable-previous-line no-empty-blocks
}

contract Comments6 /*why the name \`Comments6\`*/ is Interface1/*why we used Interface1*/, Interface2/*why we used Interface2*/, Interface3, Interface4, Interface5, Interface6 {
  // solhint-disable-previous-line no-empty-blocks
}

contract Comments7 {
  function someFunction(
    uint a, // the first value
    uint b, // the second value
    uint c // the lats value
  ) {
    someFunction(
      a, // the first value
      b, // the second value
      c // the lats value
    );
  }
}

contract Comments8 {
  function someFunction() {
    if (something) {
    }
    // comment
    else {
    }
  }
}


contract Comments8 {
  function someFunction() {
    if (something) {
    }
    /* comment
     * comment */
    else {
    }
  }
}

contract Comments9 {
  function someFunction() {
    if (something) 
      // a comment
      f();
    else {
    }
  }
}

interface Comments10 {
  function someFunction(
    // the first value
    // the second value
    // the lats value
  ) /* comment outside the parameters */ external;

  function someOtherFunction(/* checking for Block comment */) external;
}

contract Comments11 {
  string a = "\\\\";
  string b = '\\\\';

  function f() public {
    // this should not be removed
  }
}

contract Comments12 {
  function f() public {
    purchaseData[0] = DomainPurchaseData({
      /* test */prices: _rootPrices,
      // test2
      subdomainMintingEnabled: /* test3 */_rootPrices.short > 0,
      allowSubdomainsToMint: true, // test4
      wasAllowedToSubdomainMintOnCreation: true
    });
  }
}

=====================================output=====================================
pragma solidity ^0.4.24;

contract Comments1 {
    function() {
        // solhint-disable-previous-line no-empty-blocks
    }

    function hello()
        public
        modifier1
        modifier2
        modifier3
        modifier4
        modifier5
        modifier6
    {
        // solhint-disable-previous-line no-empty-blocks
    }
}

contract Comments2 {
    // solhint-disable-previous-line no-empty-blocks
}

contract Comments3 is
    Interface1,
    Interface2,
    Interface3,
    Interface4,
    Interface5,
    Interface6
{
    // solhint-disable-previous-line no-empty-blocks

    function someFunction() {} /*1*/
    /*2
     */
}

contract Comments4 is
    Interface1,
    Interface2,
    Interface3,
    Interface4,
    Interface5,
    Interface6
{
    // solhint-disable-previous-line no-empty-blocks
}

/*nice name*/
contract Comments5 {
    // solhint-disable-previous-line no-empty-blocks
}

/*why the name \`Comments6\`*/
contract Comments6 is
    Interface1, /*why we used Interface1*/
    Interface2, /*why we used Interface2*/
    Interface3,
    Interface4,
    Interface5,
    Interface6
{
    // solhint-disable-previous-line no-empty-blocks
}

contract Comments7 {
    function someFunction(
        uint256 a, // the first value
        uint256 b, // the second value
        uint256 c // the lats value
    ) {
        someFunction(
            a, // the first value
            b, // the second value
            c // the lats value
        );
    }
}

contract Comments8 {
    function someFunction() {
        if (something) {}
        // comment
        else {}
    }
}

contract Comments8 {
    function someFunction() {
        if (something) {}
        /* comment
         * comment */
        else {}
    }
}

contract Comments9 {
    function someFunction() {
        if (something)
            // a comment
            f();
        else {}
    }
}

interface Comments10 {
    function someFunction(
        // the first value
        // the second value
        // the lats value
    )/* comment outside the parameters */ external;

    function someOtherFunction(
        /* checking for Block comment */
    ) external;
}

contract Comments11 {
    string a = "\\\\";
    string b = "\\\\";

    function f() public {
        // this should not be removed
    }
}

contract Comments12 {
    function f() public {
        purchaseData[0] = DomainPurchaseData({
            /* test */
            prices: _rootPrices,
            // test2
            subdomainMintingEnabled: /* test3 */
            _rootPrices.short > 0,
            allowSubdomainsToMint: true, // test4
            wasAllowedToSubdomainMintOnCreation: true
        });
    }
}

================================================================================
`;
