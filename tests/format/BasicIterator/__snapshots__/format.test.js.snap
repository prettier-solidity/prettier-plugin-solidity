// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`BasicIterator.sol - {"compiler":"0.4.26"} format 1`] = `
====================================options=====================================
compiler: "0.4.26"
parsers: ["solidity-parse"]
printWidth: 80
                                                                                | printWidth
=====================================input======================================
/*
	This is a very simple demonstration of a while loops. Same as JS/c.
*/

contract BasicIterator {

    address creator;                  // reserve one "address"-type spot
    uint8[10] integers;               // reserve a chunk of storage for 10 8-bit unsigned integers in an array

    function BasicIterator() 
    {
        creator = msg.sender;         // set the creator address
        uint8 x = 0;                  // initialize an 8-bit, unsigned integer to zero
        while(x < integers.length)    // the variable integers was initialized to length 10
        {
        	integers[x] = x;      // set integers to [0,1,2,3,4,5,6,7,8,9] over ten iterations
        	x++;
        }
    }
    
    function getSum() constant returns (uint)  // "constant" just means this function returns something to the caller
    {                                          // which is immediately followed by what type gets returned, in this case a full uint256
    	uint8 sum = 0;
    	uint8 x = 0;
    	while(x < integers.length)
        {
        	sum = sum + integers[x];
        	x++;
        }
    	return sum;
    }
    
    /**********
     Standard kill() function to recover funds 
     **********/
    
    function kill()
    { 
        if (msg.sender == creator)
        {
            suicide(creator);  // kills this contract and sends remaining funds back to creator
        }
    }
}

=====================================output=====================================
/*
	This is a very simple demonstration of a while loops. Same as JS/c.
*/

contract BasicIterator {
    address creator; // reserve one "address"-type spot
    uint8[10] integers; // reserve a chunk of storage for 10 8-bit unsigned integers in an array

    function BasicIterator() {
        creator = msg.sender; // set the creator address
        uint8 x = 0; // initialize an 8-bit, unsigned integer to zero
        while (
            x < integers.length // the variable integers was initialized to length 10
        ) {
            integers[x] = x; // set integers to [0,1,2,3,4,5,6,7,8,9] over ten iterations
            x++;
        }
    }

    function getSum()
        constant
        returns (
            uint // "constant" just means this function returns something to the caller
        )
    {
        // which is immediately followed by what type gets returned, in this case a full uint256
        uint8 sum = 0;
        uint8 x = 0;
        while (x < integers.length) {
            sum = sum + integers[x];
            x++;
        }
        return sum;
    }

    /**********
     Standard kill() function to recover funds 
     **********/

    function kill() {
        if (msg.sender == creator) {
            suicide(creator); // kills this contract and sends remaining funds back to creator
        }
    }
}

================================================================================
`;
